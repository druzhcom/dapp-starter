{"id":"75dd4c214895cae51b870784bfecd813","_format":"hh-sol-build-info-1","solcVersion":"0.8.17","solcLongVersion":"0.8.17+commit.8df45f5f","input":{"language":"Solidity","sources":{"contracts/EduChainLinkOracle.sol":{"content":"//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\";\n\ncontract EduChainLinkOracle is VRFConsumerBase {\n    using Counters for Counters.Counter;\n    using SafeMath for uint256;\n\n    struct Student {\n        uint256 studentId;\n        uint256 groupId;\n        uint256 random;\n        bool isLucky;\n    }\n\n    Counters.Counter private studentId;\n    mapping(uint256 => Student) private students;\n    mapping(bytes32 => uint256) private studentsRandomnessRequest;\n    mapping(uint256 => uint256) playersCount;\n    bytes32 private keyHash; // нужно Чейнлинку\n    uint256 public fee; // нужно Чейнлинку\n    address private admin;\n\n    event RandomnessRequested(bytes32, uint256);\n    event LuckyStudent(uint256, uint256, bytes32, uint256);\n    event StudentCreated(uint256, uint256);\n\n    modifier onlyAdmin() {\n        require(msg.sender == admin, \"Only admin can call this function\");\n        _;\n    }\n\n    constructor(\n        address vrfCoordinator,\n        address link,\n        bytes32 _keyhash,\n        uint256 _fee\n    ) VRFConsumerBase(vrfCoordinator, link) {\n        keyHash = _keyhash;\n        fee = _fee;\n        admin = msg.sender;\n    }\n\n    function createStudent(uint256 _studentId, uint256 _groupId)\n        public\n        payable\n        onlyAdmin\n    {\n        Student memory student = Student({\n            studentId: _studentId, //studentId.current(),\n            groupId: _groupId,\n            random: 0,\n            isLucky: false\n        });\n        students[studentId.current()] = student;\n        studentId.increment();\n        emit StudentCreated(student.studentId, student.groupId);\n    }\n\n    function chooseLucky(uint256 _studentId) public {\n        Student storage student = students[_studentId];\n        require(!student.isLucky, \"Student already lucky\");\n\n        // Проверяем баланс для оплаты сбора\n        require(LINK.balanceOf(address(this)) >= fee, \"Not enough LINK\");\n        bytes32 requestId = requestRandomness(keyHash, fee);\n\n        // когда случайное число вернется в функции\n        // fulfillRandomness, оно будет иметь только requestId\n        // и случайное число, поэтому без сопоставления мы не сможем определить победителя нужной лотереи.\n        studentsRandomnessRequest[requestId] = _studentId;\n        emit RandomnessRequested(requestId, _studentId);\n    }\n\n    function fulfillRandomness(bytes32 requestId, uint256 randomness)\n        internal\n        override\n    {\n        uint256 _studentId = studentsRandomnessRequest[requestId];\n        Student storage student = students[_studentId];\n\n        uint256 winner = randomness;\n\n        student.isLucky = true;\n        student.random = randomness;\n\n        emit LuckyStudent(winner, randomness, requestId, student.studentId);\n        delete studentsRandomnessRequest[requestId];\n\n        // if (winner > 8) {\n        //     delete studentsRandomnessRequest[requestId];\n\n        //     emit LuckyStudent(winner, randomness, requestId, student.studentId);\n        // }\n    }\n\n    function isLucky(uint256 _studentId) public returns (bool) {\n        return students[_studentId].isLucky;\n    }\n\n    function getRandom(uint256 _studentId) public returns (uint256) {\n        return students[_studentId].random;\n    }\n}\n"},"@openzeppelin/contracts/utils/Counters.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"},"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./interfaces/LinkTokenInterface.sol\";\n\nimport \"./VRFRequestIDBase.sol\";\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\n * @dev want to generate randomness from.\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomness method.\n *\n * @dev The randomness argument to fulfillRandomness is the actual random value\n * @dev generated from your seed.\n *\n * @dev The requestId argument is generated from the keyHash and the seed by\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\n * @dev requests open, you can use the requestId to track which seed is\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\n * @dev details. (See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.)\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ. (Which is critical to making unpredictable randomness! See the\n * @dev next section.)\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\n * @dev block in which the request is made, user-provided seeds have no impact\n * @dev on its economic security properties. They are only included for API\n * @dev compatability with previous versions of this contract.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request.\n */\nabstract contract VRFConsumerBase is VRFRequestIDBase {\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomness the VRF output\n   */\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\n\n  /**\n   * @dev In order to keep backwards compatibility we have kept the user\n   * seed field around. We remove the use of it because given that the blockhash\n   * enters later, it overrides whatever randomness the used seed provides.\n   * Given that it adds no security, and can easily lead to misunderstandings,\n   * we have removed it from usage and can now provide a simpler API.\n   */\n  uint256 private constant USER_SEED_PLACEHOLDER = 0;\n\n  /**\n   * @notice requestRandomness initiates a request for VRF output given _seed\n   *\n   * @dev The fulfillRandomness method receives the output, once it's provided\n   * @dev by the Oracle, and verified by the vrfCoordinator.\n   *\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\n   * @dev the _fee must exceed the fee specified during registration of the\n   * @dev _keyHash.\n   *\n   * @dev The _seed parameter is vestigial, and is kept only for API\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\n   * @dev your own randomness, here, but it's not necessary because the VRF\n   * @dev oracle will mix the hash of the block containing your request into the\n   * @dev VRF seed it ultimately uses.\n   *\n   * @param _keyHash ID of public key against which randomness is generated\n   * @param _fee The amount of LINK to send with the request\n   *\n   * @return requestId unique ID for this request\n   *\n   * @dev The returned requestId can be used to distinguish responses to\n   * @dev concurrent requests. It is passed as the first argument to\n   * @dev fulfillRandomness.\n   */\n  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\n    // the hash of the block containing this request to obtain the seed/input\n    // which is finally passed to the VRF cryptographic machinery.\n    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\n    // nonces[_keyHash] must stay in sync with\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\n    // This provides protection against the user repeating their input seed,\n    // which would result in a predictable/duplicate output, if multiple such\n    // requests appeared in the same block.\n    nonces[_keyHash] = nonces[_keyHash] + 1;\n    return makeRequestId(_keyHash, vRFSeed);\n  }\n\n  LinkTokenInterface internal immutable LINK;\n  address private immutable vrfCoordinator;\n\n  // Nonces for each VRF key from which randomness has been requested.\n  //\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\n  mapping(bytes32 => uint256) /* keyHash */ /* nonce */\n    private nonces;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   * @param _link address of LINK token contract\n   *\n   * @dev https://docs.chain.link/docs/link-token-contracts\n   */\n  constructor(address _vrfCoordinator, address _link) {\n    vrfCoordinator = _vrfCoordinator;\n    LINK = LinkTokenInterface(_link);\n  }\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\n    require(msg.sender == vrfCoordinator, \"Only VRFCoordinator can fulfill\");\n    fulfillRandomness(requestId, randomness);\n  }\n}\n"},"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract VRFRequestIDBase {\n  /**\n   * @notice returns the seed which is actually input to the VRF coordinator\n   *\n   * @dev To prevent repetition of VRF output due to repetition of the\n   * @dev user-supplied seed, that seed is combined in a hash with the\n   * @dev user-specific nonce, and the address of the consuming contract. The\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\n   * @dev the final seed, but the nonce does protect against repetition in\n   * @dev requests which are included in a single block.\n   *\n   * @param _userSeed VRF seed input provided by user\n   * @param _requester Address of the requesting contract\n   * @param _nonce User-specific nonce at the time of the request\n   */\n  function makeVRFInputSeed(\n    bytes32 _keyHash,\n    uint256 _userSeed,\n    address _requester,\n    uint256 _nonce\n  ) internal pure returns (uint256) {\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\n  }\n\n  /**\n   * @notice Returns the id for this request\n   * @param _keyHash The serviceAgreement ID to be used for this request\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\n   * @return The id for this request\n   *\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\n   * @dev contract, but the one generated by makeVRFInputSeed\n   */\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\n  }\n}\n"},"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface LinkTokenInterface {\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n  function approve(address spender, uint256 value) external returns (bool success);\n\n  function balanceOf(address owner) external view returns (uint256 balance);\n\n  function decimals() external view returns (uint8 decimalPlaces);\n\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\n\n  function increaseApproval(address spender, uint256 subtractedValue) external;\n\n  function name() external view returns (string memory tokenName);\n\n  function symbol() external view returns (string memory tokenSymbol);\n\n  function totalSupply() external view returns (uint256 totalTokensIssued);\n\n  function transfer(address to, uint256 value) external returns (bool success);\n\n  function transferAndCall(\n    address to,\n    uint256 value,\n    bytes calldata data\n  ) external returns (bool success);\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool success);\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":1000},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"2018","formattedMessage":"Warning: Function state mutability can be restricted to view\n   --> contracts/EduChainLinkOracle.sol:100:5:\n    |\n100 |     function isLucky(uint256 _studentId) public returns (bool) {\n    |     ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Function state mutability can be restricted to view","severity":"warning","sourceLocation":{"end":3463,"file":"contracts/EduChainLinkOracle.sol","start":3352},"type":"Warning"},{"component":"general","errorCode":"2018","formattedMessage":"Warning: Function state mutability can be restricted to view\n   --> contracts/EduChainLinkOracle.sol:104:5:\n    |\n104 |     function getRandom(uint256 _studentId) public returns (uint256) {\n    |     ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Function state mutability can be restricted to view","severity":"warning","sourceLocation":{"end":3584,"file":"contracts/EduChainLinkOracle.sol","start":3469},"type":"Warning"}],"sources":{"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol","exportedSymbols":{"LinkTokenInterface":[265],"VRFConsumerBase":[120],"VRFRequestIDBase":[170]},"id":121,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:0"},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol","file":"./interfaces/LinkTokenInterface.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":121,"sourceUnit":266,"src":"57:45:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol","file":"./VRFRequestIDBase.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":121,"sourceUnit":171,"src":"104:32:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":5,"name":"VRFRequestIDBase","nameLocations":["5397:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":170,"src":"5397:16:0"},"id":6,"nodeType":"InheritanceSpecifier","src":"5397:16:0"}],"canonicalName":"VRFConsumerBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":4,"nodeType":"StructuredDocumentation","src":"138:5221:0","text":"****************************************************************************\n @notice Interface for contracts using VRF randomness\n *****************************************************************************\n @dev PURPOSE\n @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n @dev to Vera the verifier in such a way that Vera can be sure he's not\n @dev making his output up to suit himself. Reggie provides Vera a public key\n @dev to which he knows the secret key. Each time Vera provides a seed to\n @dev Reggie, he gives back a value which is computed completely\n @dev deterministically from the seed and the secret key.\n @dev Reggie provides a proof by which Vera can verify that the output was\n @dev correctly computed once Reggie tells it to her, but without that proof,\n @dev the output is indistinguishable to her from a uniform random sample\n @dev from the output space.\n @dev The purpose of this contract is to make it easy for unrelated contracts\n @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n @dev simple access to a verifiable source of randomness.\n *****************************************************************************\n @dev USAGE\n @dev Calling contracts must inherit from VRFConsumerBase, and can\n @dev initialize VRFConsumerBase's attributes in their constructor as\n @dev shown:\n @dev   contract VRFConsumer {\n @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\n @dev         <initialization with other arguments goes here>\n @dev       }\n @dev   }\n @dev The oracle will have given you an ID for the VRF keypair they have\n @dev committed to (let's call it keyHash), and have told you the minimum LINK\n @dev price for VRF service. Make sure your contract has sufficient LINK, and\n @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\n @dev want to generate randomness from.\n @dev Once the VRFCoordinator has received and validated the oracle's response\n @dev to your request, it will call your contract's fulfillRandomness method.\n @dev The randomness argument to fulfillRandomness is the actual random value\n @dev generated from your seed.\n @dev The requestId argument is generated from the keyHash and the seed by\n @dev makeRequestId(keyHash, seed). If your contract could have concurrent\n @dev requests open, you can use the requestId to track which seed is\n @dev associated with which randomness. See VRFRequestIDBase.sol for more\n @dev details. (See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n @dev if your contract could have multiple requests in flight simultaneously.)\n @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n @dev differ. (Which is critical to making unpredictable randomness! See the\n @dev next section.)\n *****************************************************************************\n @dev SECURITY CONSIDERATIONS\n @dev A method with the ability to call your fulfillRandomness method directly\n @dev could spoof a VRF response with any random value, so it's critical that\n @dev it cannot be directly called by anything other than this base contract\n @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n @dev For your users to trust that your contract's random behavior is free\n @dev from malicious interference, it's best if you can write it so that all\n @dev behaviors implied by a VRF response are executed *during* your\n @dev fulfillRandomness method. If your contract must store the response (or\n @dev anything derived from it) and use it later, you must ensure that any\n @dev user-significant behavior which depends on that stored value cannot be\n @dev manipulated by a subsequent VRF request.\n @dev Similarly, both miners and the VRF oracle itself have some influence\n @dev over the order in which VRF responses appear on the blockchain, so if\n @dev your contract could have multiple VRF requests in flight simultaneously,\n @dev you must ensure that the order in which the VRF responses arrive cannot\n @dev be used to manipulate your contract's user-significant behavior.\n @dev Since the ultimate input to the VRF is mixed with the block hash of the\n @dev block in which the request is made, user-provided seeds have no impact\n @dev on its economic security properties. They are only included for API\n @dev compatability with previous versions of this contract.\n @dev Since the block hash of the block which contains the requestRandomness\n @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n @dev miner could, in principle, fork the blockchain to evict the block\n @dev containing the request, forcing the request to be included in a\n @dev different block with a different hash, and therefore a different input\n @dev to the VRF. However, such an attack would incur a substantial economic\n @dev cost. This cost scales with the number of blocks the VRF oracle waits\n @dev until it calls responds to a request."},"fullyImplemented":false,"id":120,"linearizedBaseContracts":[120,170],"name":"VRFConsumerBase","nameLocation":"5378:15:0","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":7,"nodeType":"StructuredDocumentation","src":"5418:641:0","text":" @notice fulfillRandomness handles the VRF response. Your contract must\n @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n @notice principles to keep in mind when implementing your fulfillRandomness\n @notice method.\n @dev VRFConsumerBase expects its subcontracts to have a method with this\n @dev signature, and will call it once it has verified the proof\n @dev associated with the randomness. (It is triggered via a call to\n @dev rawFulfillRandomness, below.)\n @param requestId The Id initially returned by requestRandomness\n @param randomness the VRF output"},"id":14,"implemented":false,"kind":"function","modifiers":[],"name":"fulfillRandomness","nameLocation":"6071:17:0","nodeType":"FunctionDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9,"mutability":"mutable","name":"requestId","nameLocation":"6097:9:0","nodeType":"VariableDeclaration","scope":14,"src":"6089:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":8,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6089:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":11,"mutability":"mutable","name":"randomness","nameLocation":"6116:10:0","nodeType":"VariableDeclaration","scope":14,"src":"6108:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":10,"name":"uint256","nodeType":"ElementaryTypeName","src":"6108:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6088:39:0"},"returnParameters":{"id":13,"nodeType":"ParameterList","parameters":[],"src":"6144:0:0"},"scope":120,"src":"6062:83:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":true,"documentation":{"id":15,"nodeType":"StructuredDocumentation","src":"6149:388:0","text":" @dev In order to keep backwards compatibility we have kept the user\n seed field around. We remove the use of it because given that the blockhash\n enters later, it overrides whatever randomness the used seed provides.\n Given that it adds no security, and can easily lead to misunderstandings,\n we have removed it from usage and can now provide a simpler API."},"id":18,"mutability":"constant","name":"USER_SEED_PLACEHOLDER","nameLocation":"6565:21:0","nodeType":"VariableDeclaration","scope":120,"src":"6540:50:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":16,"name":"uint256","nodeType":"ElementaryTypeName","src":"6540:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30","id":17,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6589:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"visibility":"private"},{"body":{"id":69,"nodeType":"Block","src":"7828:924:0","statements":[{"expression":{"arguments":[{"id":31,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":75,"src":"7855:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":32,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":23,"src":"7871:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":35,"name":"_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21,"src":"7888:8:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":36,"name":"USER_SEED_PLACEHOLDER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"7898:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":33,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7877:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":34,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7881:6:0","memberName":"encode","nodeType":"MemberAccess","src":"7877:10:0","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":37,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7877:43:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":28,"name":"LINK","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":73,"src":"7834:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$265","typeString":"contract LinkTokenInterface"}},"id":30,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7839:15:0","memberName":"transferAndCall","nodeType":"MemberAccess","referencedDeclaration":253,"src":"7834:20:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,uint256,bytes memory) external returns (bool)"}},"id":38,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7834:87:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":39,"nodeType":"ExpressionStatement","src":"7834:87:0"},{"assignments":[41],"declarations":[{"constant":false,"id":41,"mutability":"mutable","name":"vRFSeed","nameLocation":"8160:7:0","nodeType":"VariableDeclaration","scope":69,"src":"8152:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":40,"name":"uint256","nodeType":"ElementaryTypeName","src":"8152:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":53,"initialValue":{"arguments":[{"id":43,"name":"_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21,"src":"8187:8:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":44,"name":"USER_SEED_PLACEHOLDER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"8197:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":47,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"8228:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_VRFConsumerBase_$120","typeString":"contract VRFConsumerBase"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_VRFConsumerBase_$120","typeString":"contract VRFConsumerBase"}],"id":46,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8220:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":45,"name":"address","nodeType":"ElementaryTypeName","src":"8220:7:0","typeDescriptions":{}}},"id":48,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8220:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":49,"name":"nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":79,"src":"8235:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":51,"indexExpression":{"id":50,"name":"_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21,"src":"8242:8:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8235:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":42,"name":"makeVRFInputSeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":150,"src":"8170:16:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint256_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bytes32,uint256,address,uint256) pure returns (uint256)"}},"id":52,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8170:82:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8152:100:0"},{"expression":{"id":62,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":54,"name":"nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":79,"src":"8663:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":56,"indexExpression":{"id":55,"name":"_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21,"src":"8670:8:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8663:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":61,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":57,"name":"nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":79,"src":"8682:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":59,"indexExpression":{"id":58,"name":"_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21,"src":"8689:8:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8682:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":60,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8701:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8682:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8663:39:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":63,"nodeType":"ExpressionStatement","src":"8663:39:0"},{"expression":{"arguments":[{"id":65,"name":"_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21,"src":"8729:8:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":66,"name":"vRFSeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":41,"src":"8739:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":64,"name":"makeRequestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":169,"src":"8715:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (bytes32,uint256) pure returns (bytes32)"}},"id":67,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8715:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":27,"id":68,"nodeType":"Return","src":"8708:39:0"}]},"documentation":{"id":19,"nodeType":"StructuredDocumentation","src":"6595:1134:0","text":" @notice requestRandomness initiates a request for VRF output given _seed\n @dev The fulfillRandomness method receives the output, once it's provided\n @dev by the Oracle, and verified by the vrfCoordinator.\n @dev The _keyHash must already be registered with the VRFCoordinator, and\n @dev the _fee must exceed the fee specified during registration of the\n @dev _keyHash.\n @dev The _seed parameter is vestigial, and is kept only for API\n @dev compatibility with older versions. It can't *hurt* to mix in some of\n @dev your own randomness, here, but it's not necessary because the VRF\n @dev oracle will mix the hash of the block containing your request into the\n @dev VRF seed it ultimately uses.\n @param _keyHash ID of public key against which randomness is generated\n @param _fee The amount of LINK to send with the request\n @return requestId unique ID for this request\n @dev The returned requestId can be used to distinguish responses to\n @dev concurrent requests. It is passed as the first argument to\n @dev fulfillRandomness."},"id":70,"implemented":true,"kind":"function","modifiers":[],"name":"requestRandomness","nameLocation":"7741:17:0","nodeType":"FunctionDefinition","parameters":{"id":24,"nodeType":"ParameterList","parameters":[{"constant":false,"id":21,"mutability":"mutable","name":"_keyHash","nameLocation":"7767:8:0","nodeType":"VariableDeclaration","scope":70,"src":"7759:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":20,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7759:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":23,"mutability":"mutable","name":"_fee","nameLocation":"7785:4:0","nodeType":"VariableDeclaration","scope":70,"src":"7777:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":22,"name":"uint256","nodeType":"ElementaryTypeName","src":"7777:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7758:32:0"},"returnParameters":{"id":27,"nodeType":"ParameterList","parameters":[{"constant":false,"id":26,"mutability":"mutable","name":"requestId","nameLocation":"7817:9:0","nodeType":"VariableDeclaration","scope":70,"src":"7809:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":25,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7809:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7808:19:0"},"scope":120,"src":"7732:1020:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":false,"id":73,"mutability":"immutable","name":"LINK","nameLocation":"8794:4:0","nodeType":"VariableDeclaration","scope":120,"src":"8756:42:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$265","typeString":"contract LinkTokenInterface"},"typeName":{"id":72,"nodeType":"UserDefinedTypeName","pathNode":{"id":71,"name":"LinkTokenInterface","nameLocations":["8756:18:0"],"nodeType":"IdentifierPath","referencedDeclaration":265,"src":"8756:18:0"},"referencedDeclaration":265,"src":"8756:18:0","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$265","typeString":"contract LinkTokenInterface"}},"visibility":"internal"},{"constant":false,"id":75,"mutability":"immutable","name":"vrfCoordinator","nameLocation":"8828:14:0","nodeType":"VariableDeclaration","scope":120,"src":"8802:40:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":74,"name":"address","nodeType":"ElementaryTypeName","src":"8802:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"id":79,"mutability":"mutable","name":"nonces","nameLocation":"9048:6:0","nodeType":"VariableDeclaration","scope":120,"src":"8982:72:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"typeName":{"id":78,"keyType":{"id":76,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8990:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"8982:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"valueType":{"id":77,"name":"uint256","nodeType":"ElementaryTypeName","src":"9001:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"body":{"id":97,"nodeType":"Block","src":"9300:81:0","statements":[{"expression":{"id":89,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":87,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":75,"src":"9306:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":88,"name":"_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":82,"src":"9323:15:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9306:32:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":90,"nodeType":"ExpressionStatement","src":"9306:32:0"},{"expression":{"id":95,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":91,"name":"LINK","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":73,"src":"9344:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$265","typeString":"contract LinkTokenInterface"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":93,"name":"_link","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":84,"src":"9370:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":92,"name":"LinkTokenInterface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":265,"src":"9351:18:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LinkTokenInterface_$265_$","typeString":"type(contract LinkTokenInterface)"}},"id":94,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9351:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$265","typeString":"contract LinkTokenInterface"}},"src":"9344:32:0","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$265","typeString":"contract LinkTokenInterface"}},"id":96,"nodeType":"ExpressionStatement","src":"9344:32:0"}]},"documentation":{"id":80,"nodeType":"StructuredDocumentation","src":"9059:186:0","text":" @param _vrfCoordinator address of VRFCoordinator contract\n @param _link address of LINK token contract\n @dev https://docs.chain.link/docs/link-token-contracts"},"id":98,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":85,"nodeType":"ParameterList","parameters":[{"constant":false,"id":82,"mutability":"mutable","name":"_vrfCoordinator","nameLocation":"9268:15:0","nodeType":"VariableDeclaration","scope":98,"src":"9260:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":81,"name":"address","nodeType":"ElementaryTypeName","src":"9260:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":84,"mutability":"mutable","name":"_link","nameLocation":"9293:5:0","nodeType":"VariableDeclaration","scope":98,"src":"9285:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":83,"name":"address","nodeType":"ElementaryTypeName","src":"9285:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9259:40:0"},"returnParameters":{"id":86,"nodeType":"ParameterList","parameters":[],"src":"9300:0:0"},"scope":120,"src":"9248:133:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":118,"nodeType":"Block","src":"9654:129:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":106,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9668:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9672:6:0","memberName":"sender","nodeType":"MemberAccess","src":"9668:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":108,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":75,"src":"9682:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9668:28:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c","id":110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9698:33:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_aa31d97d949424087cac59e348924584a13a8784d3590fa798a0967391035445","typeString":"literal_string \"Only VRFCoordinator can fulfill\""},"value":"Only VRFCoordinator can fulfill"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_aa31d97d949424087cac59e348924584a13a8784d3590fa798a0967391035445","typeString":"literal_string \"Only VRFCoordinator can fulfill\""}],"id":105,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9660:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":111,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9660:72:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":112,"nodeType":"ExpressionStatement","src":"9660:72:0"},{"expression":{"arguments":[{"id":114,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":100,"src":"9756:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":115,"name":"randomness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":102,"src":"9767:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":113,"name":"fulfillRandomness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":14,"src":"9738:17:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":116,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9738:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":117,"nodeType":"ExpressionStatement","src":"9738:40:0"}]},"functionSelector":"94985ddd","id":119,"implemented":true,"kind":"function","modifiers":[],"name":"rawFulfillRandomness","nameLocation":"9585:20:0","nodeType":"FunctionDefinition","parameters":{"id":103,"nodeType":"ParameterList","parameters":[{"constant":false,"id":100,"mutability":"mutable","name":"requestId","nameLocation":"9614:9:0","nodeType":"VariableDeclaration","scope":119,"src":"9606:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":99,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9606:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":102,"mutability":"mutable","name":"randomness","nameLocation":"9633:10:0","nodeType":"VariableDeclaration","scope":119,"src":"9625:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":101,"name":"uint256","nodeType":"ElementaryTypeName","src":"9625:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9605:39:0"},"returnParameters":{"id":104,"nodeType":"ParameterList","parameters":[],"src":"9654:0:0"},"scope":120,"src":"9576:207:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":121,"src":"5360:4425:0","usedErrors":[]}],"src":"32:9754:0"},"id":0},"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol","exportedSymbols":{"VRFRequestIDBase":[170]},"id":171,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":122,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:1"},{"abstract":false,"baseContracts":[],"canonicalName":"VRFRequestIDBase","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":170,"linearizedBaseContracts":[170],"name":"VRFRequestIDBase","nameLocation":"66:16:1","nodeType":"ContractDefinition","nodes":[{"body":{"id":149,"nodeType":"Block","src":"947:89:1","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":141,"name":"_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":125,"src":"989:8:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":142,"name":"_userSeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":127,"src":"999:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":143,"name":"_requester","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":129,"src":"1010:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":144,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":131,"src":"1022:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":139,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"978:3:1","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":140,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"982:6:1","memberName":"encode","nodeType":"MemberAccess","src":"978:10:1","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":145,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"978:51:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":138,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"968:9:1","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":146,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"968:62:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":137,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"960:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":136,"name":"uint256","nodeType":"ElementaryTypeName","src":"960:7:1","typeDescriptions":{}}},"id":147,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"960:71:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":135,"id":148,"nodeType":"Return","src":"953:78:1"}]},"documentation":{"id":123,"nodeType":"StructuredDocumentation","src":"87:706:1","text":" @notice returns the seed which is actually input to the VRF coordinator\n @dev To prevent repetition of VRF output due to repetition of the\n @dev user-supplied seed, that seed is combined in a hash with the\n @dev user-specific nonce, and the address of the consuming contract. The\n @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\n @dev the final seed, but the nonce does protect against repetition in\n @dev requests which are included in a single block.\n @param _userSeed VRF seed input provided by user\n @param _requester Address of the requesting contract\n @param _nonce User-specific nonce at the time of the request"},"id":150,"implemented":true,"kind":"function","modifiers":[],"name":"makeVRFInputSeed","nameLocation":"805:16:1","nodeType":"FunctionDefinition","parameters":{"id":132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":125,"mutability":"mutable","name":"_keyHash","nameLocation":"835:8:1","nodeType":"VariableDeclaration","scope":150,"src":"827:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":124,"name":"bytes32","nodeType":"ElementaryTypeName","src":"827:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":127,"mutability":"mutable","name":"_userSeed","nameLocation":"857:9:1","nodeType":"VariableDeclaration","scope":150,"src":"849:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":126,"name":"uint256","nodeType":"ElementaryTypeName","src":"849:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":129,"mutability":"mutable","name":"_requester","nameLocation":"880:10:1","nodeType":"VariableDeclaration","scope":150,"src":"872:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":128,"name":"address","nodeType":"ElementaryTypeName","src":"872:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":131,"mutability":"mutable","name":"_nonce","nameLocation":"904:6:1","nodeType":"VariableDeclaration","scope":150,"src":"896:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":130,"name":"uint256","nodeType":"ElementaryTypeName","src":"896:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:93:1"},"returnParameters":{"id":135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":134,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":150,"src":"938:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":133,"name":"uint256","nodeType":"ElementaryTypeName","src":"938:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"937:9:1"},"scope":170,"src":"796:240:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":168,"nodeType":"Block","src":"1512:70:1","statements":[{"expression":{"arguments":[{"arguments":[{"id":163,"name":"_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":153,"src":"1552:8:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":164,"name":"_vRFInputSeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":155,"src":"1562:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":161,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1535:3:1","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":162,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1539:12:1","memberName":"encodePacked","nodeType":"MemberAccess","src":"1535:16:1","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":165,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1535:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":160,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1525:9:1","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":166,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1525:52:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":159,"id":167,"nodeType":"Return","src":"1518:59:1"}]},"documentation":{"id":151,"nodeType":"StructuredDocumentation","src":"1040:373:1","text":" @notice Returns the id for this request\n @param _keyHash The serviceAgreement ID to be used for this request\n @param _vRFInputSeed The seed to be passed directly to the VRF\n @return The id for this request\n @dev Note that _vRFInputSeed is not the seed passed by the consuming\n @dev contract, but the one generated by makeVRFInputSeed"},"id":169,"implemented":true,"kind":"function","modifiers":[],"name":"makeRequestId","nameLocation":"1425:13:1","nodeType":"FunctionDefinition","parameters":{"id":156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":153,"mutability":"mutable","name":"_keyHash","nameLocation":"1447:8:1","nodeType":"VariableDeclaration","scope":169,"src":"1439:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":152,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1439:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":155,"mutability":"mutable","name":"_vRFInputSeed","nameLocation":"1465:13:1","nodeType":"VariableDeclaration","scope":169,"src":"1457:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":154,"name":"uint256","nodeType":"ElementaryTypeName","src":"1457:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1438:41:1"},"returnParameters":{"id":159,"nodeType":"ParameterList","parameters":[{"constant":false,"id":158,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":169,"src":"1503:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":157,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1503:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1502:9:1"},"scope":170,"src":"1416:166:1","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":171,"src":"57:1527:1","usedErrors":[]}],"src":"32:1553:1"},"id":1},"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol","exportedSymbols":{"LinkTokenInterface":[265]},"id":266,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":172,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:2"},{"abstract":false,"baseContracts":[],"canonicalName":"LinkTokenInterface","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":265,"linearizedBaseContracts":[265],"name":"LinkTokenInterface","nameLocation":"67:18:2","nodeType":"ContractDefinition","nodes":[{"functionSelector":"dd62ed3e","id":181,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"99:9:2","nodeType":"FunctionDefinition","parameters":{"id":177,"nodeType":"ParameterList","parameters":[{"constant":false,"id":174,"mutability":"mutable","name":"owner","nameLocation":"117:5:2","nodeType":"VariableDeclaration","scope":181,"src":"109:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":173,"name":"address","nodeType":"ElementaryTypeName","src":"109:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":176,"mutability":"mutable","name":"spender","nameLocation":"132:7:2","nodeType":"VariableDeclaration","scope":181,"src":"124:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":175,"name":"address","nodeType":"ElementaryTypeName","src":"124:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"108:32:2"},"returnParameters":{"id":180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":179,"mutability":"mutable","name":"remaining","nameLocation":"172:9:2","nodeType":"VariableDeclaration","scope":181,"src":"164:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":178,"name":"uint256","nodeType":"ElementaryTypeName","src":"164:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"163:19:2"},"scope":265,"src":"90:93:2","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"095ea7b3","id":190,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"196:7:2","nodeType":"FunctionDefinition","parameters":{"id":186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":183,"mutability":"mutable","name":"spender","nameLocation":"212:7:2","nodeType":"VariableDeclaration","scope":190,"src":"204:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":182,"name":"address","nodeType":"ElementaryTypeName","src":"204:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":185,"mutability":"mutable","name":"value","nameLocation":"229:5:2","nodeType":"VariableDeclaration","scope":190,"src":"221:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":184,"name":"uint256","nodeType":"ElementaryTypeName","src":"221:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"203:32:2"},"returnParameters":{"id":189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":188,"mutability":"mutable","name":"success","nameLocation":"259:7:2","nodeType":"VariableDeclaration","scope":190,"src":"254:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":187,"name":"bool","nodeType":"ElementaryTypeName","src":"254:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"253:14:2"},"scope":265,"src":"187:81:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"70a08231","id":197,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"281:9:2","nodeType":"FunctionDefinition","parameters":{"id":193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":192,"mutability":"mutable","name":"owner","nameLocation":"299:5:2","nodeType":"VariableDeclaration","scope":197,"src":"291:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":191,"name":"address","nodeType":"ElementaryTypeName","src":"291:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"290:15:2"},"returnParameters":{"id":196,"nodeType":"ParameterList","parameters":[{"constant":false,"id":195,"mutability":"mutable","name":"balance","nameLocation":"337:7:2","nodeType":"VariableDeclaration","scope":197,"src":"329:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":194,"name":"uint256","nodeType":"ElementaryTypeName","src":"329:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"328:17:2"},"scope":265,"src":"272:74:2","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"313ce567","id":202,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"359:8:2","nodeType":"FunctionDefinition","parameters":{"id":198,"nodeType":"ParameterList","parameters":[],"src":"367:2:2"},"returnParameters":{"id":201,"nodeType":"ParameterList","parameters":[{"constant":false,"id":200,"mutability":"mutable","name":"decimalPlaces","nameLocation":"399:13:2","nodeType":"VariableDeclaration","scope":202,"src":"393:19:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":199,"name":"uint8","nodeType":"ElementaryTypeName","src":"393:5:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"392:21:2"},"scope":265,"src":"350:64:2","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"66188463","id":211,"implemented":false,"kind":"function","modifiers":[],"name":"decreaseApproval","nameLocation":"427:16:2","nodeType":"FunctionDefinition","parameters":{"id":207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":204,"mutability":"mutable","name":"spender","nameLocation":"452:7:2","nodeType":"VariableDeclaration","scope":211,"src":"444:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":203,"name":"address","nodeType":"ElementaryTypeName","src":"444:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":206,"mutability":"mutable","name":"addedValue","nameLocation":"469:10:2","nodeType":"VariableDeclaration","scope":211,"src":"461:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":205,"name":"uint256","nodeType":"ElementaryTypeName","src":"461:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"443:37:2"},"returnParameters":{"id":210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":209,"mutability":"mutable","name":"success","nameLocation":"504:7:2","nodeType":"VariableDeclaration","scope":211,"src":"499:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":208,"name":"bool","nodeType":"ElementaryTypeName","src":"499:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"498:14:2"},"scope":265,"src":"418:95:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"d73dd623","id":218,"implemented":false,"kind":"function","modifiers":[],"name":"increaseApproval","nameLocation":"526:16:2","nodeType":"FunctionDefinition","parameters":{"id":216,"nodeType":"ParameterList","parameters":[{"constant":false,"id":213,"mutability":"mutable","name":"spender","nameLocation":"551:7:2","nodeType":"VariableDeclaration","scope":218,"src":"543:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":212,"name":"address","nodeType":"ElementaryTypeName","src":"543:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":215,"mutability":"mutable","name":"subtractedValue","nameLocation":"568:15:2","nodeType":"VariableDeclaration","scope":218,"src":"560:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":214,"name":"uint256","nodeType":"ElementaryTypeName","src":"560:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"542:42:2"},"returnParameters":{"id":217,"nodeType":"ParameterList","parameters":[],"src":"593:0:2"},"scope":265,"src":"517:77:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"06fdde03","id":223,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"607:4:2","nodeType":"FunctionDefinition","parameters":{"id":219,"nodeType":"ParameterList","parameters":[],"src":"611:2:2"},"returnParameters":{"id":222,"nodeType":"ParameterList","parameters":[{"constant":false,"id":221,"mutability":"mutable","name":"tokenName","nameLocation":"651:9:2","nodeType":"VariableDeclaration","scope":223,"src":"637:23:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":220,"name":"string","nodeType":"ElementaryTypeName","src":"637:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"636:25:2"},"scope":265,"src":"598:64:2","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"95d89b41","id":228,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"675:6:2","nodeType":"FunctionDefinition","parameters":{"id":224,"nodeType":"ParameterList","parameters":[],"src":"681:2:2"},"returnParameters":{"id":227,"nodeType":"ParameterList","parameters":[{"constant":false,"id":226,"mutability":"mutable","name":"tokenSymbol","nameLocation":"721:11:2","nodeType":"VariableDeclaration","scope":228,"src":"707:25:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":225,"name":"string","nodeType":"ElementaryTypeName","src":"707:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"706:27:2"},"scope":265,"src":"666:68:2","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"18160ddd","id":233,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"747:11:2","nodeType":"FunctionDefinition","parameters":{"id":229,"nodeType":"ParameterList","parameters":[],"src":"758:2:2"},"returnParameters":{"id":232,"nodeType":"ParameterList","parameters":[{"constant":false,"id":231,"mutability":"mutable","name":"totalTokensIssued","nameLocation":"792:17:2","nodeType":"VariableDeclaration","scope":233,"src":"784:25:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":230,"name":"uint256","nodeType":"ElementaryTypeName","src":"784:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"783:27:2"},"scope":265,"src":"738:73:2","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"a9059cbb","id":242,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"824:8:2","nodeType":"FunctionDefinition","parameters":{"id":238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":235,"mutability":"mutable","name":"to","nameLocation":"841:2:2","nodeType":"VariableDeclaration","scope":242,"src":"833:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":234,"name":"address","nodeType":"ElementaryTypeName","src":"833:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":237,"mutability":"mutable","name":"value","nameLocation":"853:5:2","nodeType":"VariableDeclaration","scope":242,"src":"845:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":236,"name":"uint256","nodeType":"ElementaryTypeName","src":"845:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"832:27:2"},"returnParameters":{"id":241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":240,"mutability":"mutable","name":"success","nameLocation":"883:7:2","nodeType":"VariableDeclaration","scope":242,"src":"878:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":239,"name":"bool","nodeType":"ElementaryTypeName","src":"878:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"877:14:2"},"scope":265,"src":"815:77:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"4000aea0","id":253,"implemented":false,"kind":"function","modifiers":[],"name":"transferAndCall","nameLocation":"905:15:2","nodeType":"FunctionDefinition","parameters":{"id":249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":244,"mutability":"mutable","name":"to","nameLocation":"934:2:2","nodeType":"VariableDeclaration","scope":253,"src":"926:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":243,"name":"address","nodeType":"ElementaryTypeName","src":"926:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":246,"mutability":"mutable","name":"value","nameLocation":"950:5:2","nodeType":"VariableDeclaration","scope":253,"src":"942:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":245,"name":"uint256","nodeType":"ElementaryTypeName","src":"942:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":248,"mutability":"mutable","name":"data","nameLocation":"976:4:2","nodeType":"VariableDeclaration","scope":253,"src":"961:19:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":247,"name":"bytes","nodeType":"ElementaryTypeName","src":"961:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"920:64:2"},"returnParameters":{"id":252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":251,"mutability":"mutable","name":"success","nameLocation":"1008:7:2","nodeType":"VariableDeclaration","scope":253,"src":"1003:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":250,"name":"bool","nodeType":"ElementaryTypeName","src":"1003:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1002:14:2"},"scope":265,"src":"896:121:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"23b872dd","id":264,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"1030:12:2","nodeType":"FunctionDefinition","parameters":{"id":260,"nodeType":"ParameterList","parameters":[{"constant":false,"id":255,"mutability":"mutable","name":"from","nameLocation":"1056:4:2","nodeType":"VariableDeclaration","scope":264,"src":"1048:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":254,"name":"address","nodeType":"ElementaryTypeName","src":"1048:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":257,"mutability":"mutable","name":"to","nameLocation":"1074:2:2","nodeType":"VariableDeclaration","scope":264,"src":"1066:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":256,"name":"address","nodeType":"ElementaryTypeName","src":"1066:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":259,"mutability":"mutable","name":"value","nameLocation":"1090:5:2","nodeType":"VariableDeclaration","scope":264,"src":"1082:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":258,"name":"uint256","nodeType":"ElementaryTypeName","src":"1082:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1042:57:2"},"returnParameters":{"id":263,"nodeType":"ParameterList","parameters":[{"constant":false,"id":262,"mutability":"mutable","name":"success","nameLocation":"1123:7:2","nodeType":"VariableDeclaration","scope":264,"src":"1118:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":261,"name":"bool","nodeType":"ElementaryTypeName","src":"1118:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1117:14:2"},"scope":265,"src":"1021:111:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":266,"src":"57:1077:2","usedErrors":[]}],"src":"32:1103:2"},"id":2},"@openzeppelin/contracts/utils/Counters.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Counters.sol","exportedSymbols":{"Counters":[339]},"id":340,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":267,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"87:23:3"},{"abstract":false,"baseContracts":[],"canonicalName":"Counters","contractDependencies":[],"contractKind":"library","documentation":{"id":268,"nodeType":"StructuredDocumentation","src":"112:311:3","text":" @title Counters\n @author Matt Condon (@shrugs)\n @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n of elements in a mapping, issuing ERC721 ids, or counting request ids.\n Include with `using Counters for Counters.Counter;`"},"fullyImplemented":true,"id":339,"linearizedBaseContracts":[339],"name":"Counters","nameLocation":"432:8:3","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Counters.Counter","id":271,"members":[{"constant":false,"id":270,"mutability":"mutable","name":"_value","nameLocation":"794:6:3","nodeType":"VariableDeclaration","scope":271,"src":"786:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":269,"name":"uint256","nodeType":"ElementaryTypeName","src":"786:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Counter","nameLocation":"454:7:3","nodeType":"StructDefinition","scope":339,"src":"447:374:3","visibility":"public"},{"body":{"id":282,"nodeType":"Block","src":"901:38:3","statements":[{"expression":{"expression":{"id":279,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":274,"src":"918:7:3","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$271_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":280,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"926:6:3","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":270,"src":"918:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":278,"id":281,"nodeType":"Return","src":"911:21:3"}]},"id":283,"implemented":true,"kind":"function","modifiers":[],"name":"current","nameLocation":"836:7:3","nodeType":"FunctionDefinition","parameters":{"id":275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":274,"mutability":"mutable","name":"counter","nameLocation":"860:7:3","nodeType":"VariableDeclaration","scope":283,"src":"844:23:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$271_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":273,"nodeType":"UserDefinedTypeName","pathNode":{"id":272,"name":"Counter","nameLocations":["844:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":271,"src":"844:7:3"},"referencedDeclaration":271,"src":"844:7:3","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$271_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"843:25:3"},"returnParameters":{"id":278,"nodeType":"ParameterList","parameters":[{"constant":false,"id":277,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":283,"src":"892:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":276,"name":"uint256","nodeType":"ElementaryTypeName","src":"892:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"891:9:3"},"scope":339,"src":"827:112:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":296,"nodeType":"Block","src":"998:70:3","statements":[{"id":295,"nodeType":"UncheckedBlock","src":"1008:54:3","statements":[{"expression":{"id":293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":289,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":286,"src":"1032:7:3","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$271_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":291,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1040:6:3","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":270,"src":"1032:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":292,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1050:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1032:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":294,"nodeType":"ExpressionStatement","src":"1032:19:3"}]}]},"id":297,"implemented":true,"kind":"function","modifiers":[],"name":"increment","nameLocation":"954:9:3","nodeType":"FunctionDefinition","parameters":{"id":287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":286,"mutability":"mutable","name":"counter","nameLocation":"980:7:3","nodeType":"VariableDeclaration","scope":297,"src":"964:23:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$271_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":285,"nodeType":"UserDefinedTypeName","pathNode":{"id":284,"name":"Counter","nameLocations":["964:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":271,"src":"964:7:3"},"referencedDeclaration":271,"src":"964:7:3","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$271_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"963:25:3"},"returnParameters":{"id":288,"nodeType":"ParameterList","parameters":[],"src":"998:0:3"},"scope":339,"src":"945:123:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":324,"nodeType":"Block","src":"1127:176:3","statements":[{"assignments":[304],"declarations":[{"constant":false,"id":304,"mutability":"mutable","name":"value","nameLocation":"1145:5:3","nodeType":"VariableDeclaration","scope":324,"src":"1137:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":303,"name":"uint256","nodeType":"ElementaryTypeName","src":"1137:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":307,"initialValue":{"expression":{"id":305,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":300,"src":"1153:7:3","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$271_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":306,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1161:6:3","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":270,"src":"1153:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1137:30:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":309,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":304,"src":"1185:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":310,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1193:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1185:9:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"436f756e7465723a2064656372656d656e74206f766572666c6f77","id":312,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1196:29:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f","typeString":"literal_string \"Counter: decrement overflow\""},"value":"Counter: decrement overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f","typeString":"literal_string \"Counter: decrement overflow\""}],"id":308,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1177:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":313,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1177:49:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":314,"nodeType":"ExpressionStatement","src":"1177:49:3"},{"id":323,"nodeType":"UncheckedBlock","src":"1236:61:3","statements":[{"expression":{"id":321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":315,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":300,"src":"1260:7:3","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$271_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":317,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1268:6:3","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":270,"src":"1260:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":318,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":304,"src":"1277:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":319,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1285:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1277:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1260:26:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":322,"nodeType":"ExpressionStatement","src":"1260:26:3"}]}]},"id":325,"implemented":true,"kind":"function","modifiers":[],"name":"decrement","nameLocation":"1083:9:3","nodeType":"FunctionDefinition","parameters":{"id":301,"nodeType":"ParameterList","parameters":[{"constant":false,"id":300,"mutability":"mutable","name":"counter","nameLocation":"1109:7:3","nodeType":"VariableDeclaration","scope":325,"src":"1093:23:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$271_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":299,"nodeType":"UserDefinedTypeName","pathNode":{"id":298,"name":"Counter","nameLocations":["1093:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":271,"src":"1093:7:3"},"referencedDeclaration":271,"src":"1093:7:3","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$271_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"1092:25:3"},"returnParameters":{"id":302,"nodeType":"ParameterList","parameters":[],"src":"1127:0:3"},"scope":339,"src":"1074:229:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":337,"nodeType":"Block","src":"1358:35:3","statements":[{"expression":{"id":335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":331,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":328,"src":"1368:7:3","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$271_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":333,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1376:6:3","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":270,"src":"1368:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1385:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1368:18:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":336,"nodeType":"ExpressionStatement","src":"1368:18:3"}]},"id":338,"implemented":true,"kind":"function","modifiers":[],"name":"reset","nameLocation":"1318:5:3","nodeType":"FunctionDefinition","parameters":{"id":329,"nodeType":"ParameterList","parameters":[{"constant":false,"id":328,"mutability":"mutable","name":"counter","nameLocation":"1340:7:3","nodeType":"VariableDeclaration","scope":338,"src":"1324:23:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$271_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":327,"nodeType":"UserDefinedTypeName","pathNode":{"id":326,"name":"Counter","nameLocations":["1324:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":271,"src":"1324:7:3"},"referencedDeclaration":271,"src":"1324:7:3","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$271_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"1323:25:3"},"returnParameters":{"id":330,"nodeType":"ParameterList","parameters":[],"src":"1358:0:3"},"scope":339,"src":"1309:84:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":340,"src":"424:971:3","usedErrors":[]}],"src":"87:1309:3"},"id":3},"@openzeppelin/contracts/utils/math/SafeMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SafeMath.sol","exportedSymbols":{"SafeMath":[651]},"id":652,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":341,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:4"},{"abstract":false,"baseContracts":[],"canonicalName":"SafeMath","contractDependencies":[],"contractKind":"library","documentation":{"id":342,"nodeType":"StructuredDocumentation","src":"285:196:4","text":" @dev Wrappers over Solidity's arithmetic operations.\n NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n now has built in overflow checking."},"fullyImplemented":true,"id":651,"linearizedBaseContracts":[651],"name":"SafeMath","nameLocation":"490:8:4","nodeType":"ContractDefinition","nodes":[{"body":{"id":373,"nodeType":"Block","src":"717:140:4","statements":[{"id":372,"nodeType":"UncheckedBlock","src":"727:124:4","statements":[{"assignments":[355],"declarations":[{"constant":false,"id":355,"mutability":"mutable","name":"c","nameLocation":"759:1:4","nodeType":"VariableDeclaration","scope":372,"src":"751:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":354,"name":"uint256","nodeType":"ElementaryTypeName","src":"751:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":359,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":356,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":345,"src":"763:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":357,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":347,"src":"767:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"763:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"751:17:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":360,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":355,"src":"786:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":361,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":345,"src":"790:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"786:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":367,"nodeType":"IfStatement","src":"782:28:4","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":363,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"801:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":364,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"808:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":365,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"800:10:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":353,"id":366,"nodeType":"Return","src":"793:17:4"}},{"expression":{"components":[{"hexValue":"74727565","id":368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"832:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":369,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":355,"src":"838:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":370,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"831:9:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":353,"id":371,"nodeType":"Return","src":"824:16:4"}]}]},"documentation":{"id":343,"nodeType":"StructuredDocumentation","src":"505:131:4","text":" @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":374,"implemented":true,"kind":"function","modifiers":[],"name":"tryAdd","nameLocation":"650:6:4","nodeType":"FunctionDefinition","parameters":{"id":348,"nodeType":"ParameterList","parameters":[{"constant":false,"id":345,"mutability":"mutable","name":"a","nameLocation":"665:1:4","nodeType":"VariableDeclaration","scope":374,"src":"657:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":344,"name":"uint256","nodeType":"ElementaryTypeName","src":"657:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":347,"mutability":"mutable","name":"b","nameLocation":"676:1:4","nodeType":"VariableDeclaration","scope":374,"src":"668:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":346,"name":"uint256","nodeType":"ElementaryTypeName","src":"668:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"656:22:4"},"returnParameters":{"id":353,"nodeType":"ParameterList","parameters":[{"constant":false,"id":350,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":374,"src":"702:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":349,"name":"bool","nodeType":"ElementaryTypeName","src":"702:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":352,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":374,"src":"708:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":351,"name":"uint256","nodeType":"ElementaryTypeName","src":"708:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"701:15:4"},"scope":651,"src":"641:216:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":401,"nodeType":"Block","src":"1078:113:4","statements":[{"id":400,"nodeType":"UncheckedBlock","src":"1088:97:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":386,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":379,"src":"1116:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":387,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":377,"src":"1120:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1116:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":393,"nodeType":"IfStatement","src":"1112:28:4","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1131:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":390,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1138:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":391,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1130:10:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":385,"id":392,"nodeType":"Return","src":"1123:17:4"}},{"expression":{"components":[{"hexValue":"74727565","id":394,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1162:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":395,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":377,"src":"1168:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":396,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":379,"src":"1172:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1168:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":398,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1161:13:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":385,"id":399,"nodeType":"Return","src":"1154:20:4"}]}]},"documentation":{"id":375,"nodeType":"StructuredDocumentation","src":"863:134:4","text":" @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":402,"implemented":true,"kind":"function","modifiers":[],"name":"trySub","nameLocation":"1011:6:4","nodeType":"FunctionDefinition","parameters":{"id":380,"nodeType":"ParameterList","parameters":[{"constant":false,"id":377,"mutability":"mutable","name":"a","nameLocation":"1026:1:4","nodeType":"VariableDeclaration","scope":402,"src":"1018:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":376,"name":"uint256","nodeType":"ElementaryTypeName","src":"1018:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":379,"mutability":"mutable","name":"b","nameLocation":"1037:1:4","nodeType":"VariableDeclaration","scope":402,"src":"1029:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":378,"name":"uint256","nodeType":"ElementaryTypeName","src":"1029:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1017:22:4"},"returnParameters":{"id":385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":382,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":402,"src":"1063:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":381,"name":"bool","nodeType":"ElementaryTypeName","src":"1063:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":384,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":402,"src":"1069:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":383,"name":"uint256","nodeType":"ElementaryTypeName","src":"1069:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1062:15:4"},"scope":651,"src":"1002:189:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":443,"nodeType":"Block","src":"1415:417:4","statements":[{"id":442,"nodeType":"UncheckedBlock","src":"1425:401:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":414,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":405,"src":"1683:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1688:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1683:6:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":421,"nodeType":"IfStatement","src":"1679:28:4","trueBody":{"expression":{"components":[{"hexValue":"74727565","id":417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1699:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"30","id":418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1705:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":419,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1698:9:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":413,"id":420,"nodeType":"Return","src":"1691:16:4"}},{"assignments":[423],"declarations":[{"constant":false,"id":423,"mutability":"mutable","name":"c","nameLocation":"1729:1:4","nodeType":"VariableDeclaration","scope":442,"src":"1721:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":422,"name":"uint256","nodeType":"ElementaryTypeName","src":"1721:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":427,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":424,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":405,"src":"1733:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":425,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":407,"src":"1737:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1733:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1721:17:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":428,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":423,"src":"1756:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":429,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":405,"src":"1760:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1756:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":431,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":407,"src":"1765:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1756:10:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":437,"nodeType":"IfStatement","src":"1752:33:4","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1776:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":434,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1783:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":435,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1775:10:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":413,"id":436,"nodeType":"Return","src":"1768:17:4"}},{"expression":{"components":[{"hexValue":"74727565","id":438,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1807:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":439,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":423,"src":"1813:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":440,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1806:9:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":413,"id":441,"nodeType":"Return","src":"1799:16:4"}]}]},"documentation":{"id":403,"nodeType":"StructuredDocumentation","src":"1197:137:4","text":" @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":444,"implemented":true,"kind":"function","modifiers":[],"name":"tryMul","nameLocation":"1348:6:4","nodeType":"FunctionDefinition","parameters":{"id":408,"nodeType":"ParameterList","parameters":[{"constant":false,"id":405,"mutability":"mutable","name":"a","nameLocation":"1363:1:4","nodeType":"VariableDeclaration","scope":444,"src":"1355:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":404,"name":"uint256","nodeType":"ElementaryTypeName","src":"1355:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":407,"mutability":"mutable","name":"b","nameLocation":"1374:1:4","nodeType":"VariableDeclaration","scope":444,"src":"1366:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":406,"name":"uint256","nodeType":"ElementaryTypeName","src":"1366:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1354:22:4"},"returnParameters":{"id":413,"nodeType":"ParameterList","parameters":[{"constant":false,"id":410,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":444,"src":"1400:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":409,"name":"bool","nodeType":"ElementaryTypeName","src":"1400:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":412,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":444,"src":"1406:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":411,"name":"uint256","nodeType":"ElementaryTypeName","src":"1406:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1399:15:4"},"scope":651,"src":"1339:493:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":471,"nodeType":"Block","src":"2057:114:4","statements":[{"id":470,"nodeType":"UncheckedBlock","src":"2067:98:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":456,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"2095:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2100:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2095:6:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":463,"nodeType":"IfStatement","src":"2091:29:4","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":459,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2111:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2118:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":461,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2110:10:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":455,"id":462,"nodeType":"Return","src":"2103:17:4"}},{"expression":{"components":[{"hexValue":"74727565","id":464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2142:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":465,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"2148:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":466,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"2152:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2148:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":468,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2141:13:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":455,"id":469,"nodeType":"Return","src":"2134:20:4"}]}]},"documentation":{"id":445,"nodeType":"StructuredDocumentation","src":"1838:138:4","text":" @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"},"id":472,"implemented":true,"kind":"function","modifiers":[],"name":"tryDiv","nameLocation":"1990:6:4","nodeType":"FunctionDefinition","parameters":{"id":450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":447,"mutability":"mutable","name":"a","nameLocation":"2005:1:4","nodeType":"VariableDeclaration","scope":472,"src":"1997:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":446,"name":"uint256","nodeType":"ElementaryTypeName","src":"1997:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":449,"mutability":"mutable","name":"b","nameLocation":"2016:1:4","nodeType":"VariableDeclaration","scope":472,"src":"2008:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":448,"name":"uint256","nodeType":"ElementaryTypeName","src":"2008:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1996:22:4"},"returnParameters":{"id":455,"nodeType":"ParameterList","parameters":[{"constant":false,"id":452,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":472,"src":"2042:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":451,"name":"bool","nodeType":"ElementaryTypeName","src":"2042:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":454,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":472,"src":"2048:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":453,"name":"uint256","nodeType":"ElementaryTypeName","src":"2048:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2041:15:4"},"scope":651,"src":"1981:190:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":499,"nodeType":"Block","src":"2406:114:4","statements":[{"id":498,"nodeType":"UncheckedBlock","src":"2416:98:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":484,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":477,"src":"2444:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2449:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2444:6:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":491,"nodeType":"IfStatement","src":"2440:29:4","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":487,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2460:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2467:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":489,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2459:10:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":483,"id":490,"nodeType":"Return","src":"2452:17:4"}},{"expression":{"components":[{"hexValue":"74727565","id":492,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2491:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":493,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":475,"src":"2497:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":494,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":477,"src":"2501:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2497:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":496,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2490:13:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":483,"id":497,"nodeType":"Return","src":"2483:20:4"}]}]},"documentation":{"id":473,"nodeType":"StructuredDocumentation","src":"2177:148:4","text":" @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"},"id":500,"implemented":true,"kind":"function","modifiers":[],"name":"tryMod","nameLocation":"2339:6:4","nodeType":"FunctionDefinition","parameters":{"id":478,"nodeType":"ParameterList","parameters":[{"constant":false,"id":475,"mutability":"mutable","name":"a","nameLocation":"2354:1:4","nodeType":"VariableDeclaration","scope":500,"src":"2346:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":474,"name":"uint256","nodeType":"ElementaryTypeName","src":"2346:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":477,"mutability":"mutable","name":"b","nameLocation":"2365:1:4","nodeType":"VariableDeclaration","scope":500,"src":"2357:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":476,"name":"uint256","nodeType":"ElementaryTypeName","src":"2357:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2345:22:4"},"returnParameters":{"id":483,"nodeType":"ParameterList","parameters":[{"constant":false,"id":480,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":500,"src":"2391:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":479,"name":"bool","nodeType":"ElementaryTypeName","src":"2391:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":482,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":500,"src":"2397:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":481,"name":"uint256","nodeType":"ElementaryTypeName","src":"2397:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2390:15:4"},"scope":651,"src":"2330:190:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":514,"nodeType":"Block","src":"2822:29:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":510,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":503,"src":"2839:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":511,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":505,"src":"2843:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2839:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":509,"id":513,"nodeType":"Return","src":"2832:12:4"}]},"documentation":{"id":501,"nodeType":"StructuredDocumentation","src":"2526:224:4","text":" @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."},"id":515,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"2764:3:4","nodeType":"FunctionDefinition","parameters":{"id":506,"nodeType":"ParameterList","parameters":[{"constant":false,"id":503,"mutability":"mutable","name":"a","nameLocation":"2776:1:4","nodeType":"VariableDeclaration","scope":515,"src":"2768:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":502,"name":"uint256","nodeType":"ElementaryTypeName","src":"2768:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":505,"mutability":"mutable","name":"b","nameLocation":"2787:1:4","nodeType":"VariableDeclaration","scope":515,"src":"2779:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":504,"name":"uint256","nodeType":"ElementaryTypeName","src":"2779:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2767:22:4"},"returnParameters":{"id":509,"nodeType":"ParameterList","parameters":[{"constant":false,"id":508,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":515,"src":"2813:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":507,"name":"uint256","nodeType":"ElementaryTypeName","src":"2813:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2812:9:4"},"scope":651,"src":"2755:96:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":529,"nodeType":"Block","src":"3189:29:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":525,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":518,"src":"3206:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":526,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":520,"src":"3210:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3206:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":524,"id":528,"nodeType":"Return","src":"3199:12:4"}]},"documentation":{"id":516,"nodeType":"StructuredDocumentation","src":"2857:260:4","text":" @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."},"id":530,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"3131:3:4","nodeType":"FunctionDefinition","parameters":{"id":521,"nodeType":"ParameterList","parameters":[{"constant":false,"id":518,"mutability":"mutable","name":"a","nameLocation":"3143:1:4","nodeType":"VariableDeclaration","scope":530,"src":"3135:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":517,"name":"uint256","nodeType":"ElementaryTypeName","src":"3135:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":520,"mutability":"mutable","name":"b","nameLocation":"3154:1:4","nodeType":"VariableDeclaration","scope":530,"src":"3146:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":519,"name":"uint256","nodeType":"ElementaryTypeName","src":"3146:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3134:22:4"},"returnParameters":{"id":524,"nodeType":"ParameterList","parameters":[{"constant":false,"id":523,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":530,"src":"3180:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":522,"name":"uint256","nodeType":"ElementaryTypeName","src":"3180:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3179:9:4"},"scope":651,"src":"3122:96:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":544,"nodeType":"Block","src":"3532:29:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":540,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":533,"src":"3549:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":541,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":535,"src":"3553:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3549:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":539,"id":543,"nodeType":"Return","src":"3542:12:4"}]},"documentation":{"id":531,"nodeType":"StructuredDocumentation","src":"3224:236:4","text":" @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."},"id":545,"implemented":true,"kind":"function","modifiers":[],"name":"mul","nameLocation":"3474:3:4","nodeType":"FunctionDefinition","parameters":{"id":536,"nodeType":"ParameterList","parameters":[{"constant":false,"id":533,"mutability":"mutable","name":"a","nameLocation":"3486:1:4","nodeType":"VariableDeclaration","scope":545,"src":"3478:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":532,"name":"uint256","nodeType":"ElementaryTypeName","src":"3478:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":535,"mutability":"mutable","name":"b","nameLocation":"3497:1:4","nodeType":"VariableDeclaration","scope":545,"src":"3489:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":534,"name":"uint256","nodeType":"ElementaryTypeName","src":"3489:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3477:22:4"},"returnParameters":{"id":539,"nodeType":"ParameterList","parameters":[{"constant":false,"id":538,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":545,"src":"3523:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":537,"name":"uint256","nodeType":"ElementaryTypeName","src":"3523:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3522:9:4"},"scope":651,"src":"3465:96:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":559,"nodeType":"Block","src":"3917:29:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":555,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":548,"src":"3934:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":556,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":550,"src":"3938:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3934:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":554,"id":558,"nodeType":"Return","src":"3927:12:4"}]},"documentation":{"id":546,"nodeType":"StructuredDocumentation","src":"3567:278:4","text":" @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator.\n Requirements:\n - The divisor cannot be zero."},"id":560,"implemented":true,"kind":"function","modifiers":[],"name":"div","nameLocation":"3859:3:4","nodeType":"FunctionDefinition","parameters":{"id":551,"nodeType":"ParameterList","parameters":[{"constant":false,"id":548,"mutability":"mutable","name":"a","nameLocation":"3871:1:4","nodeType":"VariableDeclaration","scope":560,"src":"3863:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":547,"name":"uint256","nodeType":"ElementaryTypeName","src":"3863:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":550,"mutability":"mutable","name":"b","nameLocation":"3882:1:4","nodeType":"VariableDeclaration","scope":560,"src":"3874:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":549,"name":"uint256","nodeType":"ElementaryTypeName","src":"3874:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3862:22:4"},"returnParameters":{"id":554,"nodeType":"ParameterList","parameters":[{"constant":false,"id":553,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":560,"src":"3908:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":552,"name":"uint256","nodeType":"ElementaryTypeName","src":"3908:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3907:9:4"},"scope":651,"src":"3850:96:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":574,"nodeType":"Block","src":"4466:29:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":570,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":563,"src":"4483:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":571,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":565,"src":"4487:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4483:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":569,"id":573,"nodeType":"Return","src":"4476:12:4"}]},"documentation":{"id":561,"nodeType":"StructuredDocumentation","src":"3952:442:4","text":" @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":575,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nameLocation":"4408:3:4","nodeType":"FunctionDefinition","parameters":{"id":566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":563,"mutability":"mutable","name":"a","nameLocation":"4420:1:4","nodeType":"VariableDeclaration","scope":575,"src":"4412:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":562,"name":"uint256","nodeType":"ElementaryTypeName","src":"4412:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":565,"mutability":"mutable","name":"b","nameLocation":"4431:1:4","nodeType":"VariableDeclaration","scope":575,"src":"4423:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":564,"name":"uint256","nodeType":"ElementaryTypeName","src":"4423:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4411:22:4"},"returnParameters":{"id":569,"nodeType":"ParameterList","parameters":[{"constant":false,"id":568,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":575,"src":"4457:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":567,"name":"uint256","nodeType":"ElementaryTypeName","src":"4457:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4456:9:4"},"scope":651,"src":"4399:96:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":599,"nodeType":"Block","src":"5084:106:4","statements":[{"id":598,"nodeType":"UncheckedBlock","src":"5094:90:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":588,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"5126:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":589,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":578,"src":"5131:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5126:6:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":591,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":582,"src":"5134:12:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":587,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5118:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":592,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5118:29:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":593,"nodeType":"ExpressionStatement","src":"5118:29:4"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":594,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":578,"src":"5168:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":595,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"5172:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5168:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":586,"id":597,"nodeType":"Return","src":"5161:12:4"}]}]},"documentation":{"id":576,"nodeType":"StructuredDocumentation","src":"4501:453:4","text":" @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."},"id":600,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"4968:3:4","nodeType":"FunctionDefinition","parameters":{"id":583,"nodeType":"ParameterList","parameters":[{"constant":false,"id":578,"mutability":"mutable","name":"a","nameLocation":"4989:1:4","nodeType":"VariableDeclaration","scope":600,"src":"4981:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":577,"name":"uint256","nodeType":"ElementaryTypeName","src":"4981:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":580,"mutability":"mutable","name":"b","nameLocation":"5008:1:4","nodeType":"VariableDeclaration","scope":600,"src":"5000:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":579,"name":"uint256","nodeType":"ElementaryTypeName","src":"5000:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":582,"mutability":"mutable","name":"errorMessage","nameLocation":"5033:12:4","nodeType":"VariableDeclaration","scope":600,"src":"5019:26:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":581,"name":"string","nodeType":"ElementaryTypeName","src":"5019:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4971:80:4"},"returnParameters":{"id":586,"nodeType":"ParameterList","parameters":[{"constant":false,"id":585,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":600,"src":"5075:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":584,"name":"uint256","nodeType":"ElementaryTypeName","src":"5075:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5074:9:4"},"scope":651,"src":"4959:231:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":624,"nodeType":"Block","src":"5799:105:4","statements":[{"id":623,"nodeType":"UncheckedBlock","src":"5809:89:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":613,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":605,"src":"5841:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":614,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5845:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5841:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":616,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":607,"src":"5848:12:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":612,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5833:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":617,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5833:28:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":618,"nodeType":"ExpressionStatement","src":"5833:28:4"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":619,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":603,"src":"5882:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":620,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":605,"src":"5886:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5882:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":611,"id":622,"nodeType":"Return","src":"5875:12:4"}]}]},"documentation":{"id":601,"nodeType":"StructuredDocumentation","src":"5196:473:4","text":" @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":625,"implemented":true,"kind":"function","modifiers":[],"name":"div","nameLocation":"5683:3:4","nodeType":"FunctionDefinition","parameters":{"id":608,"nodeType":"ParameterList","parameters":[{"constant":false,"id":603,"mutability":"mutable","name":"a","nameLocation":"5704:1:4","nodeType":"VariableDeclaration","scope":625,"src":"5696:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":602,"name":"uint256","nodeType":"ElementaryTypeName","src":"5696:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":605,"mutability":"mutable","name":"b","nameLocation":"5723:1:4","nodeType":"VariableDeclaration","scope":625,"src":"5715:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":604,"name":"uint256","nodeType":"ElementaryTypeName","src":"5715:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":607,"mutability":"mutable","name":"errorMessage","nameLocation":"5748:12:4","nodeType":"VariableDeclaration","scope":625,"src":"5734:26:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":606,"name":"string","nodeType":"ElementaryTypeName","src":"5734:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5686:80:4"},"returnParameters":{"id":611,"nodeType":"ParameterList","parameters":[{"constant":false,"id":610,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":625,"src":"5790:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":609,"name":"uint256","nodeType":"ElementaryTypeName","src":"5790:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5789:9:4"},"scope":651,"src":"5674:230:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":649,"nodeType":"Block","src":"6675:105:4","statements":[{"id":648,"nodeType":"UncheckedBlock","src":"6685:89:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":638,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":630,"src":"6717:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":639,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6721:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6717:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":641,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":632,"src":"6724:12:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":637,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6709:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6709:28:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":643,"nodeType":"ExpressionStatement","src":"6709:28:4"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":644,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":628,"src":"6758:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":645,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":630,"src":"6762:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6758:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":636,"id":647,"nodeType":"Return","src":"6751:12:4"}]}]},"documentation":{"id":626,"nodeType":"StructuredDocumentation","src":"5910:635:4","text":" @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":650,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nameLocation":"6559:3:4","nodeType":"FunctionDefinition","parameters":{"id":633,"nodeType":"ParameterList","parameters":[{"constant":false,"id":628,"mutability":"mutable","name":"a","nameLocation":"6580:1:4","nodeType":"VariableDeclaration","scope":650,"src":"6572:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":627,"name":"uint256","nodeType":"ElementaryTypeName","src":"6572:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":630,"mutability":"mutable","name":"b","nameLocation":"6599:1:4","nodeType":"VariableDeclaration","scope":650,"src":"6591:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":629,"name":"uint256","nodeType":"ElementaryTypeName","src":"6591:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":632,"mutability":"mutable","name":"errorMessage","nameLocation":"6624:12:4","nodeType":"VariableDeclaration","scope":650,"src":"6610:26:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":631,"name":"string","nodeType":"ElementaryTypeName","src":"6610:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6562:80:4"},"returnParameters":{"id":636,"nodeType":"ParameterList","parameters":[{"constant":false,"id":635,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":650,"src":"6666:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":634,"name":"uint256","nodeType":"ElementaryTypeName","src":"6666:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6665:9:4"},"scope":651,"src":"6550:230:4","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":652,"src":"482:6300:4","usedErrors":[]}],"src":"107:6676:4"},"id":4},"contracts/EduChainLinkOracle.sol":{"ast":{"absolutePath":"contracts/EduChainLinkOracle.sol","exportedSymbols":{"Counters":[339],"EduChainLinkOracle":[928],"LinkTokenInterface":[265],"SafeMath":[651],"VRFConsumerBase":[120],"VRFRequestIDBase":[170]},"id":929,"license":"Unlicense","nodeType":"SourceUnit","nodes":[{"id":653,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"37:23:5"},{"absolutePath":"@openzeppelin/contracts/utils/Counters.sol","file":"@openzeppelin/contracts/utils/Counters.sol","id":654,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":929,"sourceUnit":340,"src":"62:52:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SafeMath.sol","file":"@openzeppelin/contracts/utils/math/SafeMath.sol","id":655,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":929,"sourceUnit":652,"src":"115:57:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol","file":"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol","id":656,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":929,"sourceUnit":121,"src":"173:59:5","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":657,"name":"VRFConsumerBase","nameLocations":["265:15:5"],"nodeType":"IdentifierPath","referencedDeclaration":120,"src":"265:15:5"},"id":658,"nodeType":"InheritanceSpecifier","src":"265:15:5"}],"canonicalName":"EduChainLinkOracle","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":928,"linearizedBaseContracts":[928,120,170],"name":"EduChainLinkOracle","nameLocation":"243:18:5","nodeType":"ContractDefinition","nodes":[{"global":false,"id":662,"libraryName":{"id":659,"name":"Counters","nameLocations":["293:8:5"],"nodeType":"IdentifierPath","referencedDeclaration":339,"src":"293:8:5"},"nodeType":"UsingForDirective","src":"287:36:5","typeName":{"id":661,"nodeType":"UserDefinedTypeName","pathNode":{"id":660,"name":"Counters.Counter","nameLocations":["306:8:5","315:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":271,"src":"306:16:5"},"referencedDeclaration":271,"src":"306:16:5","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$271_storage_ptr","typeString":"struct Counters.Counter"}}},{"global":false,"id":665,"libraryName":{"id":663,"name":"SafeMath","nameLocations":["334:8:5"],"nodeType":"IdentifierPath","referencedDeclaration":651,"src":"334:8:5"},"nodeType":"UsingForDirective","src":"328:27:5","typeName":{"id":664,"name":"uint256","nodeType":"ElementaryTypeName","src":"347:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"canonicalName":"EduChainLinkOracle.Student","id":674,"members":[{"constant":false,"id":667,"mutability":"mutable","name":"studentId","nameLocation":"394:9:5","nodeType":"VariableDeclaration","scope":674,"src":"386:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":666,"name":"uint256","nodeType":"ElementaryTypeName","src":"386:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":669,"mutability":"mutable","name":"groupId","nameLocation":"421:7:5","nodeType":"VariableDeclaration","scope":674,"src":"413:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":668,"name":"uint256","nodeType":"ElementaryTypeName","src":"413:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":671,"mutability":"mutable","name":"random","nameLocation":"446:6:5","nodeType":"VariableDeclaration","scope":674,"src":"438:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":670,"name":"uint256","nodeType":"ElementaryTypeName","src":"438:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":673,"mutability":"mutable","name":"isLucky","nameLocation":"467:7:5","nodeType":"VariableDeclaration","scope":674,"src":"462:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":672,"name":"bool","nodeType":"ElementaryTypeName","src":"462:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"Student","nameLocation":"368:7:5","nodeType":"StructDefinition","scope":928,"src":"361:120:5","visibility":"public"},{"constant":false,"id":677,"mutability":"mutable","name":"studentId","nameLocation":"512:9:5","nodeType":"VariableDeclaration","scope":928,"src":"487:34:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$271_storage","typeString":"struct Counters.Counter"},"typeName":{"id":676,"nodeType":"UserDefinedTypeName","pathNode":{"id":675,"name":"Counters.Counter","nameLocations":["487:8:5","496:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":271,"src":"487:16:5"},"referencedDeclaration":271,"src":"487:16:5","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$271_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"private"},{"constant":false,"id":682,"mutability":"mutable","name":"students","nameLocation":"563:8:5","nodeType":"VariableDeclaration","scope":928,"src":"527:44:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Student_$674_storage_$","typeString":"mapping(uint256 => struct EduChainLinkOracle.Student)"},"typeName":{"id":681,"keyType":{"id":678,"name":"uint256","nodeType":"ElementaryTypeName","src":"535:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"527:27:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Student_$674_storage_$","typeString":"mapping(uint256 => struct EduChainLinkOracle.Student)"},"valueType":{"id":680,"nodeType":"UserDefinedTypeName","pathNode":{"id":679,"name":"Student","nameLocations":["546:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":674,"src":"546:7:5"},"referencedDeclaration":674,"src":"546:7:5","typeDescriptions":{"typeIdentifier":"t_struct$_Student_$674_storage_ptr","typeString":"struct EduChainLinkOracle.Student"}}},"visibility":"private"},{"constant":false,"id":686,"mutability":"mutable","name":"studentsRandomnessRequest","nameLocation":"613:25:5","nodeType":"VariableDeclaration","scope":928,"src":"577:61:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"typeName":{"id":685,"keyType":{"id":683,"name":"bytes32","nodeType":"ElementaryTypeName","src":"585:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"577:27:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"valueType":{"id":684,"name":"uint256","nodeType":"ElementaryTypeName","src":"596:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":690,"mutability":"mutable","name":"playersCount","nameLocation":"672:12:5","nodeType":"VariableDeclaration","scope":928,"src":"644:40:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":689,"keyType":{"id":687,"name":"uint256","nodeType":"ElementaryTypeName","src":"652:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"644:27:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueType":{"id":688,"name":"uint256","nodeType":"ElementaryTypeName","src":"663:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"constant":false,"id":692,"mutability":"mutable","name":"keyHash","nameLocation":"706:7:5","nodeType":"VariableDeclaration","scope":928,"src":"690:23:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":691,"name":"bytes32","nodeType":"ElementaryTypeName","src":"690:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"functionSelector":"ddca3f43","id":694,"mutability":"mutable","name":"fee","nameLocation":"767:3:5","nodeType":"VariableDeclaration","scope":928,"src":"752:18:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":693,"name":"uint256","nodeType":"ElementaryTypeName","src":"752:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"id":696,"mutability":"mutable","name":"admin","nameLocation":"825:5:5","nodeType":"VariableDeclaration","scope":928,"src":"809:21:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":695,"name":"address","nodeType":"ElementaryTypeName","src":"809:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"49cdaa45e000eb9a419ae3b028f7f7bec2179153ebe33293f312866428421326","id":702,"name":"RandomnessRequested","nameLocation":"843:19:5","nodeType":"EventDefinition","parameters":{"id":701,"nodeType":"ParameterList","parameters":[{"constant":false,"id":698,"indexed":false,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":702,"src":"863:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":697,"name":"bytes32","nodeType":"ElementaryTypeName","src":"863:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":700,"indexed":false,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":702,"src":"872:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":699,"name":"uint256","nodeType":"ElementaryTypeName","src":"872:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"862:18:5"},"src":"837:44:5"},{"anonymous":false,"eventSelector":"6cb6de6180fcf811791a5aa7ffd54d665e5e1d8c139314673e11930890c519fb","id":712,"name":"LuckyStudent","nameLocation":"892:12:5","nodeType":"EventDefinition","parameters":{"id":711,"nodeType":"ParameterList","parameters":[{"constant":false,"id":704,"indexed":false,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":712,"src":"905:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":703,"name":"uint256","nodeType":"ElementaryTypeName","src":"905:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":706,"indexed":false,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":712,"src":"914:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":705,"name":"uint256","nodeType":"ElementaryTypeName","src":"914:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":708,"indexed":false,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":712,"src":"923:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":707,"name":"bytes32","nodeType":"ElementaryTypeName","src":"923:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":710,"indexed":false,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":712,"src":"932:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":709,"name":"uint256","nodeType":"ElementaryTypeName","src":"932:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"904:36:5"},"src":"886:55:5"},{"anonymous":false,"eventSelector":"29358ba910ee1777e26b0ecfe36155daf0293714fc5dad62ec4287dda7f83c04","id":718,"name":"StudentCreated","nameLocation":"952:14:5","nodeType":"EventDefinition","parameters":{"id":717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":714,"indexed":false,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":718,"src":"967:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":713,"name":"uint256","nodeType":"ElementaryTypeName","src":"967:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":716,"indexed":false,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":718,"src":"976:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":715,"name":"uint256","nodeType":"ElementaryTypeName","src":"976:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"966:18:5"},"src":"946:39:5"},{"body":{"id":729,"nodeType":"Block","src":"1012:93:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":721,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1030:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1034:6:5","memberName":"sender","nodeType":"MemberAccess","src":"1030:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":723,"name":"admin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":696,"src":"1044:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1030:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f6e","id":725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1051:35:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_e0ef19aa67a8b89b19419c8977a6a75d04286a47014bf7a3d2ea537634352c8b","typeString":"literal_string \"Only admin can call this function\""},"value":"Only admin can call this function"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e0ef19aa67a8b89b19419c8977a6a75d04286a47014bf7a3d2ea537634352c8b","typeString":"literal_string \"Only admin can call this function\""}],"id":720,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1022:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1022:65:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":727,"nodeType":"ExpressionStatement","src":"1022:65:5"},{"id":728,"nodeType":"PlaceholderStatement","src":"1097:1:5"}]},"id":730,"name":"onlyAdmin","nameLocation":"1000:9:5","nodeType":"ModifierDefinition","parameters":{"id":719,"nodeType":"ParameterList","parameters":[],"src":"1009:2:5"},"src":"991:114:5","virtual":false,"visibility":"internal"},{"body":{"id":758,"nodeType":"Block","src":"1269:83:5","statements":[{"expression":{"id":747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":745,"name":"keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"1279:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":746,"name":"_keyhash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"1289:8:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1279:18:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":748,"nodeType":"ExpressionStatement","src":"1279:18:5"},{"expression":{"id":751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":749,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":694,"src":"1307:3:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":750,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":738,"src":"1313:4:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1307:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":752,"nodeType":"ExpressionStatement","src":"1307:10:5"},{"expression":{"id":756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":753,"name":"admin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":696,"src":"1327:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":754,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1335:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1339:6:5","memberName":"sender","nodeType":"MemberAccess","src":"1335:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1327:18:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":757,"nodeType":"ExpressionStatement","src":"1327:18:5"}]},"id":759,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":741,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":732,"src":"1247:14:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":742,"name":"link","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":734,"src":"1263:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":743,"kind":"baseConstructorSpecifier","modifierName":{"id":740,"name":"VRFConsumerBase","nameLocations":["1231:15:5"],"nodeType":"IdentifierPath","referencedDeclaration":120,"src":"1231:15:5"},"nodeType":"ModifierInvocation","src":"1231:37:5"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":739,"nodeType":"ParameterList","parameters":[{"constant":false,"id":732,"mutability":"mutable","name":"vrfCoordinator","nameLocation":"1140:14:5","nodeType":"VariableDeclaration","scope":759,"src":"1132:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":731,"name":"address","nodeType":"ElementaryTypeName","src":"1132:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":734,"mutability":"mutable","name":"link","nameLocation":"1172:4:5","nodeType":"VariableDeclaration","scope":759,"src":"1164:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":733,"name":"address","nodeType":"ElementaryTypeName","src":"1164:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":736,"mutability":"mutable","name":"_keyhash","nameLocation":"1194:8:5","nodeType":"VariableDeclaration","scope":759,"src":"1186:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":735,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1186:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":738,"mutability":"mutable","name":"_fee","nameLocation":"1220:4:5","nodeType":"VariableDeclaration","scope":759,"src":"1212:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":737,"name":"uint256","nodeType":"ElementaryTypeName","src":"1212:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1122:108:5"},"returnParameters":{"id":744,"nodeType":"ParameterList","parameters":[],"src":"1269:0:5"},"scope":928,"src":"1111:241:5","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":798,"nodeType":"Block","src":"1472:346:5","statements":[{"assignments":[770],"declarations":[{"constant":false,"id":770,"mutability":"mutable","name":"student","nameLocation":"1497:7:5","nodeType":"VariableDeclaration","scope":798,"src":"1482:22:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Student_$674_memory_ptr","typeString":"struct EduChainLinkOracle.Student"},"typeName":{"id":769,"nodeType":"UserDefinedTypeName","pathNode":{"id":768,"name":"Student","nameLocations":["1482:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":674,"src":"1482:7:5"},"referencedDeclaration":674,"src":"1482:7:5","typeDescriptions":{"typeIdentifier":"t_struct$_Student_$674_storage_ptr","typeString":"struct EduChainLinkOracle.Student"}},"visibility":"internal"}],"id":777,"initialValue":{"arguments":[{"id":772,"name":"_studentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":761,"src":"1540:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":773,"name":"_groupId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":763,"src":"1596:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":774,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1626:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"66616c7365","id":775,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1650:5:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":771,"name":"Student","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":674,"src":"1507:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Student_$674_storage_ptr_$","typeString":"type(struct EduChainLinkOracle.Student storage pointer)"}},"id":776,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["1529:9:5","1587:7:5","1618:6:5","1641:7:5"],"names":["studentId","groupId","random","isLucky"],"nodeType":"FunctionCall","src":"1507:159:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Student_$674_memory_ptr","typeString":"struct EduChainLinkOracle.Student memory"}},"nodeType":"VariableDeclarationStatement","src":"1482:184:5"},{"expression":{"id":784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":778,"name":"students","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"1676:8:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Student_$674_storage_$","typeString":"mapping(uint256 => struct EduChainLinkOracle.Student storage ref)"}},"id":782,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":779,"name":"studentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":677,"src":"1685:9:5","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$271_storage","typeString":"struct Counters.Counter storage ref"}},"id":780,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1695:7:5","memberName":"current","nodeType":"MemberAccess","referencedDeclaration":283,"src":"1685:17:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$271_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$271_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer) view returns (uint256)"}},"id":781,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1685:19:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1676:29:5","typeDescriptions":{"typeIdentifier":"t_struct$_Student_$674_storage","typeString":"struct EduChainLinkOracle.Student storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":783,"name":"student","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"1708:7:5","typeDescriptions":{"typeIdentifier":"t_struct$_Student_$674_memory_ptr","typeString":"struct EduChainLinkOracle.Student memory"}},"src":"1676:39:5","typeDescriptions":{"typeIdentifier":"t_struct$_Student_$674_storage","typeString":"struct EduChainLinkOracle.Student storage ref"}},"id":785,"nodeType":"ExpressionStatement","src":"1676:39:5"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":786,"name":"studentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":677,"src":"1725:9:5","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$271_storage","typeString":"struct Counters.Counter storage ref"}},"id":788,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1735:9:5","memberName":"increment","nodeType":"MemberAccess","referencedDeclaration":297,"src":"1725:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Counter_$271_storage_ptr_$returns$__$bound_to$_t_struct$_Counter_$271_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer)"}},"id":789,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1725:21:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":790,"nodeType":"ExpressionStatement","src":"1725:21:5"},{"eventCall":{"arguments":[{"expression":{"id":792,"name":"student","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"1776:7:5","typeDescriptions":{"typeIdentifier":"t_struct$_Student_$674_memory_ptr","typeString":"struct EduChainLinkOracle.Student memory"}},"id":793,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1784:9:5","memberName":"studentId","nodeType":"MemberAccess","referencedDeclaration":667,"src":"1776:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":794,"name":"student","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"1795:7:5","typeDescriptions":{"typeIdentifier":"t_struct$_Student_$674_memory_ptr","typeString":"struct EduChainLinkOracle.Student memory"}},"id":795,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1803:7:5","memberName":"groupId","nodeType":"MemberAccess","referencedDeclaration":669,"src":"1795:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":791,"name":"StudentCreated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"1761:14:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256)"}},"id":796,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1761:50:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":797,"nodeType":"EmitStatement","src":"1756:55:5"}]},"functionSelector":"93708dda","id":799,"implemented":true,"kind":"function","modifiers":[{"id":766,"kind":"modifierInvocation","modifierName":{"id":765,"name":"onlyAdmin","nameLocations":["1458:9:5"],"nodeType":"IdentifierPath","referencedDeclaration":730,"src":"1458:9:5"},"nodeType":"ModifierInvocation","src":"1458:9:5"}],"name":"createStudent","nameLocation":"1367:13:5","nodeType":"FunctionDefinition","parameters":{"id":764,"nodeType":"ParameterList","parameters":[{"constant":false,"id":761,"mutability":"mutable","name":"_studentId","nameLocation":"1389:10:5","nodeType":"VariableDeclaration","scope":799,"src":"1381:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":760,"name":"uint256","nodeType":"ElementaryTypeName","src":"1381:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":763,"mutability":"mutable","name":"_groupId","nameLocation":"1409:8:5","nodeType":"VariableDeclaration","scope":799,"src":"1401:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":762,"name":"uint256","nodeType":"ElementaryTypeName","src":"1401:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1380:38:5"},"returnParameters":{"id":767,"nodeType":"ParameterList","parameters":[],"src":"1472:0:5"},"scope":928,"src":"1358:460:5","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":849,"nodeType":"Block","src":"1872:807:5","statements":[{"assignments":[806],"declarations":[{"constant":false,"id":806,"mutability":"mutable","name":"student","nameLocation":"1898:7:5","nodeType":"VariableDeclaration","scope":849,"src":"1882:23:5","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Student_$674_storage_ptr","typeString":"struct EduChainLinkOracle.Student"},"typeName":{"id":805,"nodeType":"UserDefinedTypeName","pathNode":{"id":804,"name":"Student","nameLocations":["1882:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":674,"src":"1882:7:5"},"referencedDeclaration":674,"src":"1882:7:5","typeDescriptions":{"typeIdentifier":"t_struct$_Student_$674_storage_ptr","typeString":"struct EduChainLinkOracle.Student"}},"visibility":"internal"}],"id":810,"initialValue":{"baseExpression":{"id":807,"name":"students","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"1908:8:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Student_$674_storage_$","typeString":"mapping(uint256 => struct EduChainLinkOracle.Student storage ref)"}},"id":809,"indexExpression":{"id":808,"name":"_studentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"1917:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1908:20:5","typeDescriptions":{"typeIdentifier":"t_struct$_Student_$674_storage","typeString":"struct EduChainLinkOracle.Student storage ref"}},"nodeType":"VariableDeclarationStatement","src":"1882:46:5"},{"expression":{"arguments":[{"id":814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1946:16:5","subExpression":{"expression":{"id":812,"name":"student","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":806,"src":"1947:7:5","typeDescriptions":{"typeIdentifier":"t_struct$_Student_$674_storage_ptr","typeString":"struct EduChainLinkOracle.Student storage pointer"}},"id":813,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1955:7:5","memberName":"isLucky","nodeType":"MemberAccess","referencedDeclaration":673,"src":"1947:15:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53747564656e7420616c7265616479206c75636b79","id":815,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1964:23:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_6a0ed2f630d85172b8447d39b274fead846c000c347c8d7d67265e9ad836da36","typeString":"literal_string \"Student already lucky\""},"value":"Student already lucky"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6a0ed2f630d85172b8447d39b274fead846c000c347c8d7d67265e9ad836da36","typeString":"literal_string \"Student already lucky\""}],"id":811,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1938:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":816,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1938:50:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":817,"nodeType":"ExpressionStatement","src":"1938:50:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":823,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2104:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_EduChainLinkOracle_$928","typeString":"contract EduChainLinkOracle"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EduChainLinkOracle_$928","typeString":"contract EduChainLinkOracle"}],"id":822,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2096:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":821,"name":"address","nodeType":"ElementaryTypeName","src":"2096:7:5","typeDescriptions":{}}},"id":824,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2096:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":819,"name":"LINK","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":73,"src":"2081:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$265","typeString":"contract LinkTokenInterface"}},"id":820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2086:9:5","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":197,"src":"2081:14:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":825,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2081:29:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":826,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":694,"src":"2114:3:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2081:36:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f7420656e6f756768204c494e4b","id":828,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2119:17:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_6c0755f7b177a75a575a6fc1ad54a95f3c29b31e64f77075462b5456f056869d","typeString":"literal_string \"Not enough LINK\""},"value":"Not enough LINK"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6c0755f7b177a75a575a6fc1ad54a95f3c29b31e64f77075462b5456f056869d","typeString":"literal_string \"Not enough LINK\""}],"id":818,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2073:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":829,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2073:64:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":830,"nodeType":"ExpressionStatement","src":"2073:64:5"},{"assignments":[832],"declarations":[{"constant":false,"id":832,"mutability":"mutable","name":"requestId","nameLocation":"2155:9:5","nodeType":"VariableDeclaration","scope":849,"src":"2147:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":831,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2147:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":837,"initialValue":{"arguments":[{"id":834,"name":"keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"2185:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":835,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":694,"src":"2194:3:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":833,"name":"requestRandomness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":70,"src":"2167:17:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (bytes32,uint256) returns (bytes32)"}},"id":836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2167:31:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2147:51:5"},{"expression":{"id":842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":838,"name":"studentsRandomnessRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":686,"src":"2566:25:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":840,"indexExpression":{"id":839,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"2592:9:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2566:36:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":841,"name":"_studentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"2605:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2566:49:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":843,"nodeType":"ExpressionStatement","src":"2566:49:5"},{"eventCall":{"arguments":[{"id":845,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"2650:9:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":846,"name":"_studentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"2661:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":844,"name":"RandomnessRequested","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":702,"src":"2630:19:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":847,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2630:42:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":848,"nodeType":"EmitStatement","src":"2625:47:5"}]},"functionSelector":"65520a1e","id":850,"implemented":true,"kind":"function","modifiers":[],"name":"chooseLucky","nameLocation":"1833:11:5","nodeType":"FunctionDefinition","parameters":{"id":802,"nodeType":"ParameterList","parameters":[{"constant":false,"id":801,"mutability":"mutable","name":"_studentId","nameLocation":"1853:10:5","nodeType":"VariableDeclaration","scope":850,"src":"1845:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":800,"name":"uint256","nodeType":"ElementaryTypeName","src":"1845:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1844:20:5"},"returnParameters":{"id":803,"nodeType":"ParameterList","parameters":[],"src":"1872:0:5"},"scope":928,"src":"1824:855:5","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[14],"body":{"id":900,"nodeType":"Block","src":"2789:557:5","statements":[{"assignments":[859],"declarations":[{"constant":false,"id":859,"mutability":"mutable","name":"_studentId","nameLocation":"2807:10:5","nodeType":"VariableDeclaration","scope":900,"src":"2799:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":858,"name":"uint256","nodeType":"ElementaryTypeName","src":"2799:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":863,"initialValue":{"baseExpression":{"id":860,"name":"studentsRandomnessRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":686,"src":"2820:25:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":862,"indexExpression":{"id":861,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":852,"src":"2846:9:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2820:36:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2799:57:5"},{"assignments":[866],"declarations":[{"constant":false,"id":866,"mutability":"mutable","name":"student","nameLocation":"2882:7:5","nodeType":"VariableDeclaration","scope":900,"src":"2866:23:5","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Student_$674_storage_ptr","typeString":"struct EduChainLinkOracle.Student"},"typeName":{"id":865,"nodeType":"UserDefinedTypeName","pathNode":{"id":864,"name":"Student","nameLocations":["2866:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":674,"src":"2866:7:5"},"referencedDeclaration":674,"src":"2866:7:5","typeDescriptions":{"typeIdentifier":"t_struct$_Student_$674_storage_ptr","typeString":"struct EduChainLinkOracle.Student"}},"visibility":"internal"}],"id":870,"initialValue":{"baseExpression":{"id":867,"name":"students","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"2892:8:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Student_$674_storage_$","typeString":"mapping(uint256 => struct EduChainLinkOracle.Student storage ref)"}},"id":869,"indexExpression":{"id":868,"name":"_studentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":859,"src":"2901:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2892:20:5","typeDescriptions":{"typeIdentifier":"t_struct$_Student_$674_storage","typeString":"struct EduChainLinkOracle.Student storage ref"}},"nodeType":"VariableDeclarationStatement","src":"2866:46:5"},{"assignments":[872],"declarations":[{"constant":false,"id":872,"mutability":"mutable","name":"winner","nameLocation":"2931:6:5","nodeType":"VariableDeclaration","scope":900,"src":"2923:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":871,"name":"uint256","nodeType":"ElementaryTypeName","src":"2923:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":874,"initialValue":{"id":873,"name":"randomness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":854,"src":"2940:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2923:27:5"},{"expression":{"id":879,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":875,"name":"student","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":866,"src":"2961:7:5","typeDescriptions":{"typeIdentifier":"t_struct$_Student_$674_storage_ptr","typeString":"struct EduChainLinkOracle.Student storage pointer"}},"id":877,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2969:7:5","memberName":"isLucky","nodeType":"MemberAccess","referencedDeclaration":673,"src":"2961:15:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":878,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2979:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2961:22:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":880,"nodeType":"ExpressionStatement","src":"2961:22:5"},{"expression":{"id":885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":881,"name":"student","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":866,"src":"2993:7:5","typeDescriptions":{"typeIdentifier":"t_struct$_Student_$674_storage_ptr","typeString":"struct EduChainLinkOracle.Student storage pointer"}},"id":883,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3001:6:5","memberName":"random","nodeType":"MemberAccess","referencedDeclaration":671,"src":"2993:14:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":884,"name":"randomness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":854,"src":"3010:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2993:27:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":886,"nodeType":"ExpressionStatement","src":"2993:27:5"},{"eventCall":{"arguments":[{"id":888,"name":"winner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":872,"src":"3049:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":889,"name":"randomness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":854,"src":"3057:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":890,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":852,"src":"3069:9:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":891,"name":"student","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":866,"src":"3080:7:5","typeDescriptions":{"typeIdentifier":"t_struct$_Student_$674_storage_ptr","typeString":"struct EduChainLinkOracle.Student storage pointer"}},"id":892,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3088:9:5","memberName":"studentId","nodeType":"MemberAccess","referencedDeclaration":667,"src":"3080:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":887,"name":"LuckyStudent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":712,"src":"3036:12:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256,bytes32,uint256)"}},"id":893,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3036:62:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":894,"nodeType":"EmitStatement","src":"3031:67:5"},{"expression":{"id":898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"3108:43:5","subExpression":{"baseExpression":{"id":895,"name":"studentsRandomnessRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":686,"src":"3115:25:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":897,"indexExpression":{"id":896,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":852,"src":"3141:9:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3115:36:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":899,"nodeType":"ExpressionStatement","src":"3108:43:5"}]},"id":901,"implemented":true,"kind":"function","modifiers":[],"name":"fulfillRandomness","nameLocation":"2694:17:5","nodeType":"FunctionDefinition","overrides":{"id":856,"nodeType":"OverrideSpecifier","overrides":[],"src":"2776:8:5"},"parameters":{"id":855,"nodeType":"ParameterList","parameters":[{"constant":false,"id":852,"mutability":"mutable","name":"requestId","nameLocation":"2720:9:5","nodeType":"VariableDeclaration","scope":901,"src":"2712:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":851,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2712:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":854,"mutability":"mutable","name":"randomness","nameLocation":"2739:10:5","nodeType":"VariableDeclaration","scope":901,"src":"2731:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":853,"name":"uint256","nodeType":"ElementaryTypeName","src":"2731:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2711:39:5"},"returnParameters":{"id":857,"nodeType":"ParameterList","parameters":[],"src":"2789:0:5"},"scope":928,"src":"2685:661:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":913,"nodeType":"Block","src":"3411:52:5","statements":[{"expression":{"expression":{"baseExpression":{"id":908,"name":"students","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"3428:8:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Student_$674_storage_$","typeString":"mapping(uint256 => struct EduChainLinkOracle.Student storage ref)"}},"id":910,"indexExpression":{"id":909,"name":"_studentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":903,"src":"3437:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3428:20:5","typeDescriptions":{"typeIdentifier":"t_struct$_Student_$674_storage","typeString":"struct EduChainLinkOracle.Student storage ref"}},"id":911,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3449:7:5","memberName":"isLucky","nodeType":"MemberAccess","referencedDeclaration":673,"src":"3428:28:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":907,"id":912,"nodeType":"Return","src":"3421:35:5"}]},"functionSelector":"77cfad25","id":914,"implemented":true,"kind":"function","modifiers":[],"name":"isLucky","nameLocation":"3361:7:5","nodeType":"FunctionDefinition","parameters":{"id":904,"nodeType":"ParameterList","parameters":[{"constant":false,"id":903,"mutability":"mutable","name":"_studentId","nameLocation":"3377:10:5","nodeType":"VariableDeclaration","scope":914,"src":"3369:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":902,"name":"uint256","nodeType":"ElementaryTypeName","src":"3369:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3368:20:5"},"returnParameters":{"id":907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":906,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":914,"src":"3405:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":905,"name":"bool","nodeType":"ElementaryTypeName","src":"3405:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3404:6:5"},"scope":928,"src":"3352:111:5","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":926,"nodeType":"Block","src":"3533:51:5","statements":[{"expression":{"expression":{"baseExpression":{"id":921,"name":"students","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"3550:8:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Student_$674_storage_$","typeString":"mapping(uint256 => struct EduChainLinkOracle.Student storage ref)"}},"id":923,"indexExpression":{"id":922,"name":"_studentId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":916,"src":"3559:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3550:20:5","typeDescriptions":{"typeIdentifier":"t_struct$_Student_$674_storage","typeString":"struct EduChainLinkOracle.Student storage ref"}},"id":924,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3571:6:5","memberName":"random","nodeType":"MemberAccess","referencedDeclaration":671,"src":"3550:27:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":920,"id":925,"nodeType":"Return","src":"3543:34:5"}]},"functionSelector":"cd4b6914","id":927,"implemented":true,"kind":"function","modifiers":[],"name":"getRandom","nameLocation":"3478:9:5","nodeType":"FunctionDefinition","parameters":{"id":917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":916,"mutability":"mutable","name":"_studentId","nameLocation":"3496:10:5","nodeType":"VariableDeclaration","scope":927,"src":"3488:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":915,"name":"uint256","nodeType":"ElementaryTypeName","src":"3488:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3487:20:5"},"returnParameters":{"id":920,"nodeType":"ParameterList","parameters":[{"constant":false,"id":919,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":927,"src":"3524:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":918,"name":"uint256","nodeType":"ElementaryTypeName","src":"3524:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3523:9:5"},"scope":928,"src":"3469:115:5","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":929,"src":"234:3352:5","usedErrors":[]}],"src":"37:3550:5"},"id":5}},"contracts":{"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol":{"VRFConsumerBase":{"abi":[{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"},{"internalType":"uint256","name":"randomness","type":"uint256"}],"name":"rawFulfillRandomness","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator, _link) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash), and have told you the minimum LINKprice for VRF service. Make sure your contract has sufficient LINK, andcall requestRandomness(keyHash, fee, seed), where seed is the input youwant to generate randomness from.Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomness method.The randomness argument to fulfillRandomness is the actual random valuegenerated from your seed.The requestId argument is generated from the keyHash and the seed bymakeRequestId(keyHash, seed). If your contract could have concurrentrequests open, you can use the requestId to track which seed isassociated with which randomness. See VRFRequestIDBase.sol for moredetails. (See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.)Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. (Which is critical to making unpredictable randomness! See thenext section.) *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the ultimate input to the VRF is mixed with the block hash of theblock in which the request is made, user-provided seeds have no impacton its economic security properties. They are only included for APIcompatability with previous versions of this contract.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request.","kind":"dev","methods":{"constructor":{"details":"https://docs.chain.link/docs/link-token-contracts","params":{"_link":"address of LINK token contract","_vrfCoordinator":"address of VRFCoordinator contract"}}},"stateVariables":{"USER_SEED_PLACEHOLDER":{"details":"In order to keep backwards compatibility we have kept the user seed field around. We remove the use of it because given that the blockhash enters later, it overrides whatever randomness the used seed provides. Given that it adds no security, and can easily lead to misunderstandings, we have removed it from usage and can now provide a simpler API."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"rawFulfillRandomness(bytes32,uint256)":"94985ddd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator, _link) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash), and have told you the minimum LINKprice for VRF service. Make sure your contract has sufficient LINK, andcall requestRandomness(keyHash, fee, seed), where seed is the input youwant to generate randomness from.Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomness method.The randomness argument to fulfillRandomness is the actual random valuegenerated from your seed.The requestId argument is generated from the keyHash and the seed bymakeRequestId(keyHash, seed). If your contract could have concurrentrequests open, you can use the requestId to track which seed isassociated with which randomness. See VRFRequestIDBase.sol for moredetails. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.)Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. (Which is critical to making unpredictable randomness! See thenext section.) *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the ultimate input to the VRF is mixed with the block hash of theblock in which the request is made, user-provided seeds have no impacton its economic security properties. They are only included for APIcompatability with previous versions of this contract.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"https://docs.chain.link/docs/link-token-contracts\",\"params\":{\"_link\":\"address of LINK token contract\",\"_vrfCoordinator\":\"address of VRFCoordinator contract\"}}},\"stateVariables\":{\"USER_SEED_PLACEHOLDER\":{\"details\":\"In order to keep backwards compatibility we have kept the user seed field around. We remove the use of it because given that the blockhash enters later, it overrides whatever randomness the used seed provides. Given that it adds no security, and can easily lead to misunderstandings, we have removed it from usage and can now provide a simpler API.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\":\"VRFConsumerBase\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 private constant USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface internal immutable LINK;\\n  address private immutable vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 => uint256) /* keyHash */ /* nonce */\\n    private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(address _vrfCoordinator, address _link) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\",\"keccak256\":\"0xff9e7d773545a1a5d73106e72bfb429da79c1cc4d893fb62051df801d2e61469\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  ) internal pure returns (uint256) {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\\n\",\"keccak256\":\"0x2bf1168e8fe548fa990e0aeaf89ef90680f80aa31eeaf901f485df60de51d51b\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":79,"contract":"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol:VRFConsumerBase","label":"nonces","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_uint256)"}],"types":{"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"notice":"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************","version":1}}},"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol":{"VRFRequestIDBase":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220e8bc76126f8a33e83b833b2a5c583ef29c4193ffd5145553c828bbeb87e5d25064736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3F DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE8 0xBC PUSH23 0x126F8A33E83B833B2A5C583EF29C4193FFD5145553C828 0xBB 0xEB DUP8 0xE5 0xD2 POP PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"57:1527:1:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604052600080fdfea2646970667358221220e8bc76126f8a33e83b833b2a5c583ef29c4193ffd5145553c828bbeb87e5d25064736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE8 0xBC PUSH23 0x126F8A33E83B833B2A5C583EF29C4193FFD5145553C828 0xBB 0xEB DUP8 0xE5 0xD2 POP PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"57:1527:1:-:0;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"12600","executionCost":"66","totalCost":"12666"},"internal":{"makeRequestId(bytes32,uint256)":"infinite","makeVRFInputSeed(bytes32,uint256,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":\"VRFRequestIDBase\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  ) internal pure returns (uint256) {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\\n\",\"keccak256\":\"0x2bf1168e8fe548fa990e0aeaf89ef90680f80aa31eeaf901f485df60de51d51b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol":{"LinkTokenInterface":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"remaining","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"decimalPlaces","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"decreaseApproval","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"increaseApproval","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"tokenName","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"tokenSymbol","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"totalTokensIssued","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"transferAndCall","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","decreaseApproval(address,uint256)":"66188463","increaseApproval(address,uint256)":"d73dd623","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferAndCall(address,uint256,bytes)":"4000aea0","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"decimalPlaces\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTokensIssued\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":\"LinkTokenInterface\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Counters.sol":{"Counters":{"abi":[],"devdoc":{"author":"Matt Condon (@shrugs)","details":"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`","kind":"dev","methods":{},"title":"Counters","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207683f30236eeac7e1c81c168e95a9de5e72829fb61c9f0e1c1e473c629784e9864736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH23 0x83F30236EEAC7E1C81C168E95A9DE5E72829FB61C9F0E1 0xC1 0xE4 PUSH20 0xC629784E9864736F6C6343000811003300000000 ","sourceMap":"424:971:3:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;424:971:3;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207683f30236eeac7e1c81c168e95a9de5e72829fb61c9f0e1c1e473c629784e9864736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH23 0x83F30236EEAC7E1C81C168E95A9DE5E72829FB61C9F0E1 0xC1 0xE4 PUSH20 0xC629784E9864736F6C6343000811003300000000 ","sourceMap":"424:971:3:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"current(struct Counters.Counter storage pointer)":"infinite","decrement(struct Counters.Counter storage pointer)":"infinite","increment(struct Counters.Counter storage pointer)":"infinite","reset(struct Counters.Counter storage pointer)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Counters\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Counters.sol\":\"Counters\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SafeMath.sol":{"SafeMath":{"abi":[],"devdoc":{"details":"Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220298af24e5e588d51f6be2d326199b7991998e5d93a8385957810a2e2255efdb664736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x29 DUP11 CALLCODE 0x4E 0x5E PC DUP14 MLOAD 0xF6 0xBE 0x2D ORIGIN PUSH2 0x99B7 SWAP10 NOT SWAP9 0xE5 0xD9 GASPRICE DUP4 DUP6 SWAP6 PUSH25 0x10A2E2255EFDB664736F6C6343000811003300000000000000 ","sourceMap":"482:6300:4:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;482:6300:4;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220298af24e5e588d51f6be2d326199b7991998e5d93a8385957810a2e2255efdb664736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x29 DUP11 CALLCODE 0x4E 0x5E PC DUP14 MLOAD 0xF6 0xBE 0x2D ORIGIN PUSH2 0x99B7 SWAP10 NOT SWAP9 0xE5 0xD9 GASPRICE DUP4 DUP6 SWAP6 PUSH25 0x10A2E2255EFDB664736F6C6343000811003300000000000000 ","sourceMap":"482:6300:4:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"add(uint256,uint256)":"infinite","div(uint256,uint256)":"infinite","div(uint256,uint256,string memory)":"infinite","mod(uint256,uint256)":"infinite","mod(uint256,uint256,string memory)":"infinite","mul(uint256,uint256)":"infinite","sub(uint256,uint256)":"infinite","sub(uint256,uint256,string memory)":"infinite","tryAdd(uint256,uint256)":"infinite","tryDiv(uint256,uint256)":"infinite","tryMod(uint256,uint256)":"infinite","tryMul(uint256,uint256)":"infinite","trySub(uint256,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/EduChainLinkOracle.sol":{"EduChainLinkOracle":{"abi":[{"inputs":[{"internalType":"address","name":"vrfCoordinator","type":"address"},{"internalType":"address","name":"link","type":"address"},{"internalType":"bytes32","name":"_keyhash","type":"bytes32"},{"internalType":"uint256","name":"_fee","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"","type":"uint256"}],"name":"LuckyStudent","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"","type":"uint256"}],"name":"RandomnessRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"","type":"uint256"}],"name":"StudentCreated","type":"event"},{"inputs":[{"internalType":"uint256","name":"_studentId","type":"uint256"}],"name":"chooseLucky","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_studentId","type":"uint256"},{"internalType":"uint256","name":"_groupId","type":"uint256"}],"name":"createStudent","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"fee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_studentId","type":"uint256"}],"name":"getRandom","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_studentId","type":"uint256"}],"name":"isLucky","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"},{"internalType":"uint256","name":"randomness","type":"uint256"}],"name":"rawFulfillRandomness","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_759":{"entryPoint":null,"id":759,"parameterSlots":4,"returnSlots":0},"@_98":{"entryPoint":null,"id":98,"parameterSlots":2,"returnSlots":0},"abi_decode_address_fromMemory":{"entryPoint":97,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_addresst_addresst_bytes32t_uint256_fromMemory":{"entryPoint":125,"id":null,"parameterSlots":2,"returnSlots":4}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:614:6","statements":[{"nodeType":"YulBlock","src":"6:3:6","statements":[]},{"body":{"nodeType":"YulBlock","src":"74:117:6","statements":[{"nodeType":"YulAssignment","src":"84:22:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"99:6:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"93:5:6"},"nodeType":"YulFunctionCall","src":"93:13:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"84:5:6"}]},{"body":{"nodeType":"YulBlock","src":"169:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"178:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"181:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"171:6:6"},"nodeType":"YulFunctionCall","src":"171:12:6"},"nodeType":"YulExpressionStatement","src":"171:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"128:5:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"139:5:6"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"154:3:6","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"159:1:6","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"150:3:6"},"nodeType":"YulFunctionCall","src":"150:11:6"},{"kind":"number","nodeType":"YulLiteral","src":"163:1:6","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"146:3:6"},"nodeType":"YulFunctionCall","src":"146:19:6"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"135:3:6"},"nodeType":"YulFunctionCall","src":"135:31:6"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"125:2:6"},"nodeType":"YulFunctionCall","src":"125:42:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"118:6:6"},"nodeType":"YulFunctionCall","src":"118:50:6"},"nodeType":"YulIf","src":"115:70:6"}]},"name":"abi_decode_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"53:6:6","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"64:5:6","type":""}],"src":"14:177:6"},{"body":{"nodeType":"YulBlock","src":"328:284:6","statements":[{"body":{"nodeType":"YulBlock","src":"375:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"384:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"387:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"377:6:6"},"nodeType":"YulFunctionCall","src":"377:12:6"},"nodeType":"YulExpressionStatement","src":"377:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"349:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"358:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"345:3:6"},"nodeType":"YulFunctionCall","src":"345:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"370:3:6","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"341:3:6"},"nodeType":"YulFunctionCall","src":"341:33:6"},"nodeType":"YulIf","src":"338:53:6"},{"nodeType":"YulAssignment","src":"400:50:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"440:9:6"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"410:29:6"},"nodeType":"YulFunctionCall","src":"410:40:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"400:6:6"}]},{"nodeType":"YulAssignment","src":"459:59:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"503:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"514:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"499:3:6"},"nodeType":"YulFunctionCall","src":"499:18:6"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"469:29:6"},"nodeType":"YulFunctionCall","src":"469:49:6"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"459:6:6"}]},{"nodeType":"YulAssignment","src":"527:35:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"547:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"558:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"543:3:6"},"nodeType":"YulFunctionCall","src":"543:18:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"537:5:6"},"nodeType":"YulFunctionCall","src":"537:25:6"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"527:6:6"}]},{"nodeType":"YulAssignment","src":"571:35:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"591:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"602:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"587:3:6"},"nodeType":"YulFunctionCall","src":"587:18:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"581:5:6"},"nodeType":"YulFunctionCall","src":"581:25:6"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"571:6:6"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_bytes32t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"270:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"281:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"293:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"301:6:6","type":""},{"name":"value2","nodeType":"YulTypedName","src":"309:6:6","type":""},{"name":"value3","nodeType":"YulTypedName","src":"317:6:6","type":""}],"src":"196:416:6"}]},"contents":"{\n    { }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_bytes32t_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address_fromMemory(headStart)\n        value1 := abi_decode_address_fromMemory(add(headStart, 32))\n        value2 := mload(add(headStart, 64))\n        value3 := mload(add(headStart, 96))\n    }\n}","id":6,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60c060405234801561001057600080fd5b5060405161092e38038061092e83398101604081905261002f9161007d565b6001600160a01b0393841660a05292909116608052600555600655600780546001600160a01b031916331790556100c0565b80516001600160a01b038116811461007857600080fd5b919050565b6000806000806080858703121561009357600080fd5b61009c85610061565b93506100aa60208601610061565b6040860151606090960151949790965092505050565b60805160a05161083b6100f36000396000818161046401526105120152600081816101f501526104e3015261083b6000f3fe6080604052600436106100655760003560e01c806394985ddd1161004357806394985ddd146100e7578063cd4b691414610107578063ddca3f431461014657600080fd5b806365520a1e1461006a57806377cfad251461008c57806393708dda146100d4575b600080fd5b34801561007657600080fd5b5061008a6100853660046106e8565b61015c565b005b34801561009857600080fd5b506100bf6100a73660046106e8565b60009081526002602052604090206003015460ff1690565b60405190151581526020015b60405180910390f35b61008a6100e2366004610701565b61031a565b3480156100f357600080fd5b5061008a610102366004610701565b610459565b34801561011357600080fd5b506101386101223660046106e8565b6000908152600260208190526040909120015490565b6040519081526020016100cb565b34801561015257600080fd5b5061013860065481565b6000818152600260205260409020600381015460ff16156101c45760405162461bcd60e51b815260206004820152601560248201527f53747564656e7420616c7265616479206c75636b79000000000000000000000060448201526064015b60405180910390fd5b6006546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610244573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102689190610723565b10156102b65760405162461bcd60e51b815260206004820152600f60248201527f4e6f7420656e6f756768204c494e4b000000000000000000000000000000000060448201526064016101bb565b60006102c66005546006546104df565b60008181526003602090815260409182902086905581518381529081018690529192507f49cdaa45e000eb9a419ae3b028f7f7bec2179153ebe33293f31286642842132691015b60405180910390a1505050565b6007546001600160a01b0316331461039a5760405162461bcd60e51b815260206004820152602160248201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f60448201527f6e0000000000000000000000000000000000000000000000000000000000000060648201526084016101bb565b600060405180608001604052808481526020018381526020016000815260200160001515815250905080600260006103d160015490565b8152602080820192909252604090810160002083518155918301516001808401919091559083015160028301556060909201516003909101805460ff1916911515919091179055805481019055805160208083015160408051938452918301527f29358ba910ee1777e26b0ecfe36155daf0293714fc5dad62ec4287dda7f83c04910161030d565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104d15760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c0060448201526064016101bb565b6104db828261065a565b5050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634000aea07f00000000000000000000000000000000000000000000000000000000000000008486600060405160200161054f929190918252602082015260400190565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161057c9392919061073c565b6020604051808303816000875af115801561059b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bf91906107a2565b5060008381526020818152604080832054815180840188905280830185905230606082015260808082018390528351808303909101815260a0909101909252815191830191909120868452929091526106199060016107cb565b600085815260208181526040918290209290925580518083018790528082019390935280518084038201815260609093019052815191012090505b92915050565b600082815260036020818152604080842054808552600280845294829020938401805460ff1916600117905593830185905582548151868152928301869052908201869052606082015283907f6cb6de6180fcf811791a5aa7ffd54d665e5e1d8c139314673e11930890c519fb9060800160405180910390a150505060009182525060036020526040812055565b6000602082840312156106fa57600080fd5b5035919050565b6000806040838503121561071457600080fd5b50508035926020909101359150565b60006020828403121561073557600080fd5b5051919050565b6001600160a01b038416815260006020848184015260606040840152835180606085015260005b8181101561077f57858101830151858201608001528201610763565b506000608082860101526080601f19601f83011685010192505050949350505050565b6000602082840312156107b457600080fd5b815180151581146107c457600080fd5b9392505050565b80820180821115610654577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220463d4830095400e26da61cf255dfbff5e10ee86cac0ce5c5cabfca602ab70c4a64736f6c63430008110033","opcodes":"PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x92E CODESIZE SUB DUP1 PUSH2 0x92E DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x7D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0xA0 MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x80 MSTORE PUSH1 0x5 SSTORE PUSH1 0x6 SSTORE PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR SWAP1 SSTORE PUSH2 0xC0 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x78 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9C DUP6 PUSH2 0x61 JUMP JUMPDEST SWAP4 POP PUSH2 0xAA PUSH1 0x20 DUP7 ADD PUSH2 0x61 JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MLOAD PUSH1 0x60 SWAP1 SWAP7 ADD MLOAD SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH2 0x83B PUSH2 0xF3 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x464 ADD MSTORE PUSH2 0x512 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x1F5 ADD MSTORE PUSH2 0x4E3 ADD MSTORE PUSH2 0x83B PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x65 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x94985DDD GT PUSH2 0x43 JUMPI DUP1 PUSH4 0x94985DDD EQ PUSH2 0xE7 JUMPI DUP1 PUSH4 0xCD4B6914 EQ PUSH2 0x107 JUMPI DUP1 PUSH4 0xDDCA3F43 EQ PUSH2 0x146 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x65520A1E EQ PUSH2 0x6A JUMPI DUP1 PUSH4 0x77CFAD25 EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0x93708DDA EQ PUSH2 0xD4 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x76 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8A PUSH2 0x85 CALLDATASIZE PUSH1 0x4 PUSH2 0x6E8 JUMP JUMPDEST PUSH2 0x15C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xBF PUSH2 0xA7 CALLDATASIZE PUSH1 0x4 PUSH2 0x6E8 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x8A PUSH2 0xE2 CALLDATASIZE PUSH1 0x4 PUSH2 0x701 JUMP JUMPDEST PUSH2 0x31A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8A PUSH2 0x102 CALLDATASIZE PUSH1 0x4 PUSH2 0x701 JUMP JUMPDEST PUSH2 0x459 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x113 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x138 PUSH2 0x122 CALLDATASIZE PUSH1 0x4 PUSH2 0x6E8 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xCB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x152 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x138 PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1C4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53747564656E7420616C7265616479206C75636B790000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x244 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x268 SWAP2 SWAP1 PUSH2 0x723 JUMP JUMPDEST LT ISZERO PUSH2 0x2B6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420656E6F756768204C494E4B0000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1BB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C6 PUSH1 0x5 SLOAD PUSH1 0x6 SLOAD PUSH2 0x4DF JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP7 SWAP1 SSTORE DUP2 MLOAD DUP4 DUP2 MSTORE SWAP1 DUP2 ADD DUP7 SWAP1 MSTORE SWAP2 SWAP3 POP PUSH32 0x49CDAA45E000EB9A419AE3B028F7F7BEC2179153EBE33293F312866428421326 SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x39A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C792061646D696E2063616E2063616C6C20746869732066756E6374696F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E00000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1BB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP SWAP1 POP DUP1 PUSH1 0x2 PUSH1 0x0 PUSH2 0x3D1 PUSH1 0x1 SLOAD SWAP1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 KECCAK256 DUP4 MLOAD DUP2 SSTORE SWAP2 DUP4 ADD MLOAD PUSH1 0x1 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 SSTORE SWAP1 DUP4 ADD MLOAD PUSH1 0x2 DUP4 ADD SSTORE PUSH1 0x60 SWAP1 SWAP3 ADD MLOAD PUSH1 0x3 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 SLOAD DUP2 ADD SWAP1 SSTORE DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE SWAP2 DUP4 ADD MSTORE PUSH32 0x29358BA910EE1777E26B0ECFE36155DAF0293714FC5DAD62EC4287DDA7F83C04 SWAP2 ADD PUSH2 0x30D JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x4D1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C7920565246436F6F7264696E61746F722063616E2066756C66696C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1BB JUMP JUMPDEST PUSH2 0x4DB DUP3 DUP3 PUSH2 0x65A JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x4000AEA0 PUSH32 0x0 DUP5 DUP7 PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x54F SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x57C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x73C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x59B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5BF SWAP2 SWAP1 PUSH2 0x7A2 JUMP JUMPDEST POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD DUP2 MLOAD DUP1 DUP5 ADD DUP9 SWAP1 MSTORE DUP1 DUP4 ADD DUP6 SWAP1 MSTORE ADDRESS PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP1 DUP3 ADD DUP4 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xA0 SWAP1 SWAP2 ADD SWAP1 SWAP3 MSTORE DUP2 MLOAD SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 KECCAK256 DUP7 DUP5 MSTORE SWAP3 SWAP1 SWAP2 MSTORE PUSH2 0x619 SWAP1 PUSH1 0x1 PUSH2 0x7CB JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE DUP1 MLOAD DUP1 DUP4 ADD DUP8 SWAP1 MSTORE DUP1 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP1 MLOAD DUP1 DUP5 SUB DUP3 ADD DUP2 MSTORE PUSH1 0x60 SWAP1 SWAP4 ADD SWAP1 MSTORE DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SLOAD DUP1 DUP6 MSTORE PUSH1 0x2 DUP1 DUP5 MSTORE SWAP5 DUP3 SWAP1 KECCAK256 SWAP4 DUP5 ADD DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE SWAP4 DUP4 ADD DUP6 SWAP1 SSTORE DUP3 SLOAD DUP2 MLOAD DUP7 DUP2 MSTORE SWAP3 DUP4 ADD DUP7 SWAP1 MSTORE SWAP1 DUP3 ADD DUP7 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD MSTORE DUP4 SWAP1 PUSH32 0x6CB6DE6180FCF811791A5AA7FFD54D665E5E1D8C139314673E11930890C519FB SWAP1 PUSH1 0x80 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP PUSH1 0x0 SWAP2 DUP3 MSTORE POP PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x714 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x735 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP5 DUP2 DUP5 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP5 ADD MSTORE DUP4 MLOAD DUP1 PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x77F JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x80 ADD MSTORE DUP3 ADD PUSH2 0x763 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x80 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x80 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x7C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x654 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CHAINID RETURNDATASIZE BASEFEE ADDRESS MULMOD SLOAD STOP 0xE2 PUSH14 0xA61CF255DFBFF5E10EE86CAC0CE5 0xC5 0xCA 0xBF 0xCA PUSH1 0x2A 0xB7 0xC 0x4A PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"234:3352:5:-:0;;;1111:241;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;9306:32:0;;;;;9344;;;;;;1279:7:5::1;:18:::0;1307:3:::1;:10:::0;1327:5:::1;:18:::0;;-1:-1:-1;;;;;;1327:18:5::1;1335:10;1327:18;::::0;;234:3352;;14:177:6;93:13;;-1:-1:-1;;;;;135:31:6;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:416::-;293:6;301;309;317;370:3;358:9;349:7;345:23;341:33;338:53;;;387:1;384;377:12;338:53;410:40;440:9;410:40;:::i;:::-;400:50;;469:49;514:2;503:9;499:18;469:49;:::i;:::-;558:2;543:18;;537:25;602:2;587:18;;;581:25;196:416;;459:59;;-1:-1:-1;196:416:6;-1:-1:-1;;;196:416:6:o;:::-;234:3352:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@chooseLucky_850":{"entryPoint":348,"id":850,"parameterSlots":1,"returnSlots":0},"@createStudent_799":{"entryPoint":794,"id":799,"parameterSlots":2,"returnSlots":0},"@current_283":{"entryPoint":null,"id":283,"parameterSlots":1,"returnSlots":1},"@fee_694":{"entryPoint":null,"id":694,"parameterSlots":0,"returnSlots":0},"@fulfillRandomness_901":{"entryPoint":1626,"id":901,"parameterSlots":2,"returnSlots":0},"@getRandom_927":{"entryPoint":null,"id":927,"parameterSlots":1,"returnSlots":1},"@increment_297":{"entryPoint":null,"id":297,"parameterSlots":1,"returnSlots":0},"@isLucky_914":{"entryPoint":null,"id":914,"parameterSlots":1,"returnSlots":1},"@makeRequestId_169":{"entryPoint":null,"id":169,"parameterSlots":2,"returnSlots":1},"@makeVRFInputSeed_150":{"entryPoint":null,"id":150,"parameterSlots":4,"returnSlots":1},"@rawFulfillRandomness_119":{"entryPoint":1113,"id":119,"parameterSlots":2,"returnSlots":0},"@requestRandomness_70":{"entryPoint":1247,"id":70,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":1954,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_uint256":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256":{"entryPoint":1768,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":1827,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_uint256":{"entryPoint":1793,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_packed_t_bytes32_t_uint256__to_t_bytes32_t_uint256__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":1852,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint256_t_address_t_uint256__to_t_bytes32_t_uint256_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6a0ed2f630d85172b8447d39b274fead846c000c347c8d7d67265e9ad836da36__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6c0755f7b177a75a575a6fc1ad54a95f3c29b31e64f77075462b5456f056869d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_aa31d97d949424087cac59e348924584a13a8784d3590fa798a0967391035445__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e0ef19aa67a8b89b19419c8977a6a75d04286a47014bf7a3d2ea537634352c8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_bytes32_t_uint256__to_t_uint256_t_uint256_t_bytes32_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":1995,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:5862:6","statements":[{"nodeType":"YulBlock","src":"6:3:6","statements":[]},{"body":{"nodeType":"YulBlock","src":"84:110:6","statements":[{"body":{"nodeType":"YulBlock","src":"130:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"139:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"142:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"132:6:6"},"nodeType":"YulFunctionCall","src":"132:12:6"},"nodeType":"YulExpressionStatement","src":"132:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"105:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"114:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"101:3:6"},"nodeType":"YulFunctionCall","src":"101:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"126:2:6","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"97:3:6"},"nodeType":"YulFunctionCall","src":"97:32:6"},"nodeType":"YulIf","src":"94:52:6"},{"nodeType":"YulAssignment","src":"155:33:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"178:9:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"165:12:6"},"nodeType":"YulFunctionCall","src":"165:23:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"155:6:6"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"50:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"61:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"73:6:6","type":""}],"src":"14:180:6"},{"body":{"nodeType":"YulBlock","src":"294:92:6","statements":[{"nodeType":"YulAssignment","src":"304:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"316:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"327:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"312:3:6"},"nodeType":"YulFunctionCall","src":"312:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"304:4:6"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"346:9:6"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"371:6:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"364:6:6"},"nodeType":"YulFunctionCall","src":"364:14:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"357:6:6"},"nodeType":"YulFunctionCall","src":"357:22:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"339:6:6"},"nodeType":"YulFunctionCall","src":"339:41:6"},"nodeType":"YulExpressionStatement","src":"339:41:6"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"263:9:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"274:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"285:4:6","type":""}],"src":"199:187:6"},{"body":{"nodeType":"YulBlock","src":"478:161:6","statements":[{"body":{"nodeType":"YulBlock","src":"524:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"533:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"536:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"526:6:6"},"nodeType":"YulFunctionCall","src":"526:12:6"},"nodeType":"YulExpressionStatement","src":"526:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"499:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"508:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"495:3:6"},"nodeType":"YulFunctionCall","src":"495:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"520:2:6","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"491:3:6"},"nodeType":"YulFunctionCall","src":"491:32:6"},"nodeType":"YulIf","src":"488:52:6"},{"nodeType":"YulAssignment","src":"549:33:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"572:9:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"559:12:6"},"nodeType":"YulFunctionCall","src":"559:23:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"549:6:6"}]},{"nodeType":"YulAssignment","src":"591:42:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"618:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"629:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"614:3:6"},"nodeType":"YulFunctionCall","src":"614:18:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"601:12:6"},"nodeType":"YulFunctionCall","src":"601:32:6"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"591:6:6"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"436:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"447:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"459:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"467:6:6","type":""}],"src":"391:248:6"},{"body":{"nodeType":"YulBlock","src":"731:161:6","statements":[{"body":{"nodeType":"YulBlock","src":"777:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"786:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"789:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"779:6:6"},"nodeType":"YulFunctionCall","src":"779:12:6"},"nodeType":"YulExpressionStatement","src":"779:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"752:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"761:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"748:3:6"},"nodeType":"YulFunctionCall","src":"748:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"773:2:6","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"744:3:6"},"nodeType":"YulFunctionCall","src":"744:32:6"},"nodeType":"YulIf","src":"741:52:6"},{"nodeType":"YulAssignment","src":"802:33:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"825:9:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"812:12:6"},"nodeType":"YulFunctionCall","src":"812:23:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"802:6:6"}]},{"nodeType":"YulAssignment","src":"844:42:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"871:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"882:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"867:3:6"},"nodeType":"YulFunctionCall","src":"867:18:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"854:12:6"},"nodeType":"YulFunctionCall","src":"854:32:6"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"844:6:6"}]}]},"name":"abi_decode_tuple_t_bytes32t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"689:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"700:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"712:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"720:6:6","type":""}],"src":"644:248:6"},{"body":{"nodeType":"YulBlock","src":"998:76:6","statements":[{"nodeType":"YulAssignment","src":"1008:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1020:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"1031:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1016:3:6"},"nodeType":"YulFunctionCall","src":"1016:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1008:4:6"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1050:9:6"},{"name":"value0","nodeType":"YulIdentifier","src":"1061:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1043:6:6"},"nodeType":"YulFunctionCall","src":"1043:25:6"},"nodeType":"YulExpressionStatement","src":"1043:25:6"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"967:9:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"978:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"989:4:6","type":""}],"src":"897:177:6"},{"body":{"nodeType":"YulBlock","src":"1253:171:6","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1270:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"1281:2:6","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1263:6:6"},"nodeType":"YulFunctionCall","src":"1263:21:6"},"nodeType":"YulExpressionStatement","src":"1263:21:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1304:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"1315:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1300:3:6"},"nodeType":"YulFunctionCall","src":"1300:18:6"},{"kind":"number","nodeType":"YulLiteral","src":"1320:2:6","type":"","value":"21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1293:6:6"},"nodeType":"YulFunctionCall","src":"1293:30:6"},"nodeType":"YulExpressionStatement","src":"1293:30:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1343:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"1354:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1339:3:6"},"nodeType":"YulFunctionCall","src":"1339:18:6"},{"hexValue":"53747564656e7420616c7265616479206c75636b79","kind":"string","nodeType":"YulLiteral","src":"1359:23:6","type":"","value":"Student already lucky"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1332:6:6"},"nodeType":"YulFunctionCall","src":"1332:51:6"},"nodeType":"YulExpressionStatement","src":"1332:51:6"},{"nodeType":"YulAssignment","src":"1392:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1404:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"1415:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1400:3:6"},"nodeType":"YulFunctionCall","src":"1400:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1392:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_6a0ed2f630d85172b8447d39b274fead846c000c347c8d7d67265e9ad836da36__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1230:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1244:4:6","type":""}],"src":"1079:345:6"},{"body":{"nodeType":"YulBlock","src":"1530:125:6","statements":[{"nodeType":"YulAssignment","src":"1540:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1552:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"1563:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1548:3:6"},"nodeType":"YulFunctionCall","src":"1548:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1540:4:6"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1582:9:6"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1597:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"1605:42:6","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1593:3:6"},"nodeType":"YulFunctionCall","src":"1593:55:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1575:6:6"},"nodeType":"YulFunctionCall","src":"1575:74:6"},"nodeType":"YulExpressionStatement","src":"1575:74:6"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1499:9:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1510:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1521:4:6","type":""}],"src":"1429:226:6"},{"body":{"nodeType":"YulBlock","src":"1741:103:6","statements":[{"body":{"nodeType":"YulBlock","src":"1787:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1796:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1799:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1789:6:6"},"nodeType":"YulFunctionCall","src":"1789:12:6"},"nodeType":"YulExpressionStatement","src":"1789:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1762:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"1771:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1758:3:6"},"nodeType":"YulFunctionCall","src":"1758:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"1783:2:6","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1754:3:6"},"nodeType":"YulFunctionCall","src":"1754:32:6"},"nodeType":"YulIf","src":"1751:52:6"},{"nodeType":"YulAssignment","src":"1812:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1828:9:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1822:5:6"},"nodeType":"YulFunctionCall","src":"1822:16:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1812:6:6"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1707:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1718:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1730:6:6","type":""}],"src":"1660:184:6"},{"body":{"nodeType":"YulBlock","src":"2023:165:6","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2040:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"2051:2:6","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2033:6:6"},"nodeType":"YulFunctionCall","src":"2033:21:6"},"nodeType":"YulExpressionStatement","src":"2033:21:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2074:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"2085:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2070:3:6"},"nodeType":"YulFunctionCall","src":"2070:18:6"},{"kind":"number","nodeType":"YulLiteral","src":"2090:2:6","type":"","value":"15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2063:6:6"},"nodeType":"YulFunctionCall","src":"2063:30:6"},"nodeType":"YulExpressionStatement","src":"2063:30:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2113:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"2124:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2109:3:6"},"nodeType":"YulFunctionCall","src":"2109:18:6"},{"hexValue":"4e6f7420656e6f756768204c494e4b","kind":"string","nodeType":"YulLiteral","src":"2129:17:6","type":"","value":"Not enough LINK"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2102:6:6"},"nodeType":"YulFunctionCall","src":"2102:45:6"},"nodeType":"YulExpressionStatement","src":"2102:45:6"},{"nodeType":"YulAssignment","src":"2156:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2168:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"2179:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2164:3:6"},"nodeType":"YulFunctionCall","src":"2164:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2156:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_6c0755f7b177a75a575a6fc1ad54a95f3c29b31e64f77075462b5456f056869d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2000:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2014:4:6","type":""}],"src":"1849:339:6"},{"body":{"nodeType":"YulBlock","src":"2322:119:6","statements":[{"nodeType":"YulAssignment","src":"2332:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2344:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"2355:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2340:3:6"},"nodeType":"YulFunctionCall","src":"2340:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2332:4:6"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2374:9:6"},{"name":"value0","nodeType":"YulIdentifier","src":"2385:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2367:6:6"},"nodeType":"YulFunctionCall","src":"2367:25:6"},"nodeType":"YulExpressionStatement","src":"2367:25:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2412:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"2423:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2408:3:6"},"nodeType":"YulFunctionCall","src":"2408:18:6"},{"name":"value1","nodeType":"YulIdentifier","src":"2428:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2401:6:6"},"nodeType":"YulFunctionCall","src":"2401:34:6"},"nodeType":"YulExpressionStatement","src":"2401:34:6"}]},"name":"abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2283:9:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2294:6:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2302:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2313:4:6","type":""}],"src":"2193:248:6"},{"body":{"nodeType":"YulBlock","src":"2620:223:6","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2637:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"2648:2:6","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2630:6:6"},"nodeType":"YulFunctionCall","src":"2630:21:6"},"nodeType":"YulExpressionStatement","src":"2630:21:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2671:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"2682:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2667:3:6"},"nodeType":"YulFunctionCall","src":"2667:18:6"},{"kind":"number","nodeType":"YulLiteral","src":"2687:2:6","type":"","value":"33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2660:6:6"},"nodeType":"YulFunctionCall","src":"2660:30:6"},"nodeType":"YulExpressionStatement","src":"2660:30:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2710:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"2721:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2706:3:6"},"nodeType":"YulFunctionCall","src":"2706:18:6"},{"hexValue":"4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f","kind":"string","nodeType":"YulLiteral","src":"2726:34:6","type":"","value":"Only admin can call this functio"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2699:6:6"},"nodeType":"YulFunctionCall","src":"2699:62:6"},"nodeType":"YulExpressionStatement","src":"2699:62:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2781:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"2792:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2777:3:6"},"nodeType":"YulFunctionCall","src":"2777:18:6"},{"hexValue":"6e","kind":"string","nodeType":"YulLiteral","src":"2797:3:6","type":"","value":"n"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2770:6:6"},"nodeType":"YulFunctionCall","src":"2770:31:6"},"nodeType":"YulExpressionStatement","src":"2770:31:6"},{"nodeType":"YulAssignment","src":"2810:27:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2822:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"2833:3:6","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2818:3:6"},"nodeType":"YulFunctionCall","src":"2818:19:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2810:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_e0ef19aa67a8b89b19419c8977a6a75d04286a47014bf7a3d2ea537634352c8b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2597:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2611:4:6","type":""}],"src":"2446:397:6"},{"body":{"nodeType":"YulBlock","src":"2977:119:6","statements":[{"nodeType":"YulAssignment","src":"2987:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2999:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"3010:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2995:3:6"},"nodeType":"YulFunctionCall","src":"2995:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2987:4:6"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3029:9:6"},{"name":"value0","nodeType":"YulIdentifier","src":"3040:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3022:6:6"},"nodeType":"YulFunctionCall","src":"3022:25:6"},"nodeType":"YulExpressionStatement","src":"3022:25:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3067:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"3078:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3063:3:6"},"nodeType":"YulFunctionCall","src":"3063:18:6"},{"name":"value1","nodeType":"YulIdentifier","src":"3083:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3056:6:6"},"nodeType":"YulFunctionCall","src":"3056:34:6"},"nodeType":"YulExpressionStatement","src":"3056:34:6"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2938:9:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2949:6:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2957:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2968:4:6","type":""}],"src":"2848:248:6"},{"body":{"nodeType":"YulBlock","src":"3275:181:6","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3292:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"3303:2:6","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3285:6:6"},"nodeType":"YulFunctionCall","src":"3285:21:6"},"nodeType":"YulExpressionStatement","src":"3285:21:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3326:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"3337:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3322:3:6"},"nodeType":"YulFunctionCall","src":"3322:18:6"},{"kind":"number","nodeType":"YulLiteral","src":"3342:2:6","type":"","value":"31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3315:6:6"},"nodeType":"YulFunctionCall","src":"3315:30:6"},"nodeType":"YulExpressionStatement","src":"3315:30:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3365:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"3376:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3361:3:6"},"nodeType":"YulFunctionCall","src":"3361:18:6"},{"hexValue":"4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c","kind":"string","nodeType":"YulLiteral","src":"3381:33:6","type":"","value":"Only VRFCoordinator can fulfill"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3354:6:6"},"nodeType":"YulFunctionCall","src":"3354:61:6"},"nodeType":"YulExpressionStatement","src":"3354:61:6"},{"nodeType":"YulAssignment","src":"3424:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3436:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"3447:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3432:3:6"},"nodeType":"YulFunctionCall","src":"3432:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3424:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_aa31d97d949424087cac59e348924584a13a8784d3590fa798a0967391035445__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3252:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3266:4:6","type":""}],"src":"3101:355:6"},{"body":{"nodeType":"YulBlock","src":"3636:565:6","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3653:9:6"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3668:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"3676:42:6","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3664:3:6"},"nodeType":"YulFunctionCall","src":"3664:55:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3646:6:6"},"nodeType":"YulFunctionCall","src":"3646:74:6"},"nodeType":"YulExpressionStatement","src":"3646:74:6"},{"nodeType":"YulVariableDeclaration","src":"3729:12:6","value":{"kind":"number","nodeType":"YulLiteral","src":"3739:2:6","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3733:2:6","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3761:9:6"},{"name":"_1","nodeType":"YulIdentifier","src":"3772:2:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3757:3:6"},"nodeType":"YulFunctionCall","src":"3757:18:6"},{"name":"value1","nodeType":"YulIdentifier","src":"3777:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3750:6:6"},"nodeType":"YulFunctionCall","src":"3750:34:6"},"nodeType":"YulExpressionStatement","src":"3750:34:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3804:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"3815:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3800:3:6"},"nodeType":"YulFunctionCall","src":"3800:18:6"},{"kind":"number","nodeType":"YulLiteral","src":"3820:2:6","type":"","value":"96"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3793:6:6"},"nodeType":"YulFunctionCall","src":"3793:30:6"},"nodeType":"YulExpressionStatement","src":"3793:30:6"},{"nodeType":"YulVariableDeclaration","src":"3832:27:6","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"3852:6:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3846:5:6"},"nodeType":"YulFunctionCall","src":"3846:13:6"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3836:6:6","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3879:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"3890:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3875:3:6"},"nodeType":"YulFunctionCall","src":"3875:18:6"},{"name":"length","nodeType":"YulIdentifier","src":"3895:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3868:6:6"},"nodeType":"YulFunctionCall","src":"3868:34:6"},"nodeType":"YulExpressionStatement","src":"3868:34:6"},{"nodeType":"YulVariableDeclaration","src":"3911:10:6","value":{"kind":"number","nodeType":"YulLiteral","src":"3920:1:6","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"3915:1:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"3980:91:6","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4009:9:6"},{"name":"i","nodeType":"YulIdentifier","src":"4020:1:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4005:3:6"},"nodeType":"YulFunctionCall","src":"4005:17:6"},{"kind":"number","nodeType":"YulLiteral","src":"4024:3:6","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4001:3:6"},"nodeType":"YulFunctionCall","src":"4001:27:6"},{"arguments":[{"arguments":[{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"4044:6:6"},{"name":"i","nodeType":"YulIdentifier","src":"4052:1:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4040:3:6"},"nodeType":"YulFunctionCall","src":"4040:14:6"},{"name":"_1","nodeType":"YulIdentifier","src":"4056:2:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4036:3:6"},"nodeType":"YulFunctionCall","src":"4036:23:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4030:5:6"},"nodeType":"YulFunctionCall","src":"4030:30:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3994:6:6"},"nodeType":"YulFunctionCall","src":"3994:67:6"},"nodeType":"YulExpressionStatement","src":"3994:67:6"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3941:1:6"},{"name":"length","nodeType":"YulIdentifier","src":"3944:6:6"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3938:2:6"},"nodeType":"YulFunctionCall","src":"3938:13:6"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3952:19:6","statements":[{"nodeType":"YulAssignment","src":"3954:15:6","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3963:1:6"},{"name":"_1","nodeType":"YulIdentifier","src":"3966:2:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3959:3:6"},"nodeType":"YulFunctionCall","src":"3959:10:6"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"3954:1:6"}]}]},"pre":{"nodeType":"YulBlock","src":"3934:3:6","statements":[]},"src":"3930:141:6"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4095:9:6"},{"name":"length","nodeType":"YulIdentifier","src":"4106:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4091:3:6"},"nodeType":"YulFunctionCall","src":"4091:22:6"},{"kind":"number","nodeType":"YulLiteral","src":"4115:3:6","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4087:3:6"},"nodeType":"YulFunctionCall","src":"4087:32:6"},{"kind":"number","nodeType":"YulLiteral","src":"4121:1:6","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4080:6:6"},"nodeType":"YulFunctionCall","src":"4080:43:6"},"nodeType":"YulExpressionStatement","src":"4080:43:6"},{"nodeType":"YulAssignment","src":"4132:63:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4148:9:6"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4167:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"4175:2:6","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4163:3:6"},"nodeType":"YulFunctionCall","src":"4163:15:6"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4184:2:6","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4180:3:6"},"nodeType":"YulFunctionCall","src":"4180:7:6"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4159:3:6"},"nodeType":"YulFunctionCall","src":"4159:29:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4144:3:6"},"nodeType":"YulFunctionCall","src":"4144:45:6"},{"kind":"number","nodeType":"YulLiteral","src":"4191:3:6","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4140:3:6"},"nodeType":"YulFunctionCall","src":"4140:55:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4132:4:6"}]}]},"name":"abi_encode_tuple_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3589:9:6","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3600:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3608:6:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3616:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3627:4:6","type":""}],"src":"3461:740:6"},{"body":{"nodeType":"YulBlock","src":"4284:199:6","statements":[{"body":{"nodeType":"YulBlock","src":"4330:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4339:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4342:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4332:6:6"},"nodeType":"YulFunctionCall","src":"4332:12:6"},"nodeType":"YulExpressionStatement","src":"4332:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4305:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"4314:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4301:3:6"},"nodeType":"YulFunctionCall","src":"4301:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"4326:2:6","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4297:3:6"},"nodeType":"YulFunctionCall","src":"4297:32:6"},"nodeType":"YulIf","src":"4294:52:6"},{"nodeType":"YulVariableDeclaration","src":"4355:29:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4374:9:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4368:5:6"},"nodeType":"YulFunctionCall","src":"4368:16:6"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4359:5:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"4437:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4446:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4449:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4439:6:6"},"nodeType":"YulFunctionCall","src":"4439:12:6"},"nodeType":"YulExpressionStatement","src":"4439:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4406:5:6"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4427:5:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4420:6:6"},"nodeType":"YulFunctionCall","src":"4420:13:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4413:6:6"},"nodeType":"YulFunctionCall","src":"4413:21:6"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4403:2:6"},"nodeType":"YulFunctionCall","src":"4403:32:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4396:6:6"},"nodeType":"YulFunctionCall","src":"4396:40:6"},"nodeType":"YulIf","src":"4393:60:6"},{"nodeType":"YulAssignment","src":"4462:15:6","value":{"name":"value","nodeType":"YulIdentifier","src":"4472:5:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4462:6:6"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4250:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4261:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4273:6:6","type":""}],"src":"4206:277:6"},{"body":{"nodeType":"YulBlock","src":"4536:231:6","statements":[{"nodeType":"YulAssignment","src":"4546:16:6","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4557:1:6"},{"name":"y","nodeType":"YulIdentifier","src":"4560:1:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4553:3:6"},"nodeType":"YulFunctionCall","src":"4553:9:6"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"4546:3:6"}]},{"body":{"nodeType":"YulBlock","src":"4593:168:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4614:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4617:77:6","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4607:6:6"},"nodeType":"YulFunctionCall","src":"4607:88:6"},"nodeType":"YulExpressionStatement","src":"4607:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4715:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"4718:4:6","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4708:6:6"},"nodeType":"YulFunctionCall","src":"4708:15:6"},"nodeType":"YulExpressionStatement","src":"4708:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4743:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4746:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4736:6:6"},"nodeType":"YulFunctionCall","src":"4736:15:6"},"nodeType":"YulExpressionStatement","src":"4736:15:6"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4577:1:6"},{"name":"sum","nodeType":"YulIdentifier","src":"4580:3:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4574:2:6"},"nodeType":"YulFunctionCall","src":"4574:10:6"},"nodeType":"YulIf","src":"4571:190:6"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"4519:1:6","type":""},{"name":"y","nodeType":"YulTypedName","src":"4522:1:6","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"4528:3:6","type":""}],"src":"4488:279:6"},{"body":{"nodeType":"YulBlock","src":"4957:206:6","statements":[{"nodeType":"YulAssignment","src":"4967:27:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4979:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"4990:3:6","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4975:3:6"},"nodeType":"YulFunctionCall","src":"4975:19:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4967:4:6"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5010:9:6"},{"name":"value0","nodeType":"YulIdentifier","src":"5021:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5003:6:6"},"nodeType":"YulFunctionCall","src":"5003:25:6"},"nodeType":"YulExpressionStatement","src":"5003:25:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5048:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"5059:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5044:3:6"},"nodeType":"YulFunctionCall","src":"5044:18:6"},{"name":"value1","nodeType":"YulIdentifier","src":"5064:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5037:6:6"},"nodeType":"YulFunctionCall","src":"5037:34:6"},"nodeType":"YulExpressionStatement","src":"5037:34:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5091:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"5102:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5087:3:6"},"nodeType":"YulFunctionCall","src":"5087:18:6"},{"name":"value2","nodeType":"YulIdentifier","src":"5107:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5080:6:6"},"nodeType":"YulFunctionCall","src":"5080:34:6"},"nodeType":"YulExpressionStatement","src":"5080:34:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5134:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"5145:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5130:3:6"},"nodeType":"YulFunctionCall","src":"5130:18:6"},{"name":"value3","nodeType":"YulIdentifier","src":"5150:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5123:6:6"},"nodeType":"YulFunctionCall","src":"5123:34:6"},"nodeType":"YulExpressionStatement","src":"5123:34:6"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_bytes32_t_uint256__to_t_uint256_t_uint256_t_bytes32_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4902:9:6","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4913:6:6","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4921:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4929:6:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4937:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4948:4:6","type":""}],"src":"4772:391:6"},{"body":{"nodeType":"YulBlock","src":"5353:255:6","statements":[{"nodeType":"YulAssignment","src":"5363:27:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5375:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"5386:3:6","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5371:3:6"},"nodeType":"YulFunctionCall","src":"5371:19:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5363:4:6"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5406:9:6"},{"name":"value0","nodeType":"YulIdentifier","src":"5417:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5399:6:6"},"nodeType":"YulFunctionCall","src":"5399:25:6"},"nodeType":"YulExpressionStatement","src":"5399:25:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5444:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"5455:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5440:3:6"},"nodeType":"YulFunctionCall","src":"5440:18:6"},{"name":"value1","nodeType":"YulIdentifier","src":"5460:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5433:6:6"},"nodeType":"YulFunctionCall","src":"5433:34:6"},"nodeType":"YulExpressionStatement","src":"5433:34:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5487:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"5498:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5483:3:6"},"nodeType":"YulFunctionCall","src":"5483:18:6"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"5507:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"5515:42:6","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5503:3:6"},"nodeType":"YulFunctionCall","src":"5503:55:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5476:6:6"},"nodeType":"YulFunctionCall","src":"5476:83:6"},"nodeType":"YulExpressionStatement","src":"5476:83:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5579:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"5590:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5575:3:6"},"nodeType":"YulFunctionCall","src":"5575:18:6"},{"name":"value3","nodeType":"YulIdentifier","src":"5595:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5568:6:6"},"nodeType":"YulFunctionCall","src":"5568:34:6"},"nodeType":"YulExpressionStatement","src":"5568:34:6"}]},"name":"abi_encode_tuple_t_bytes32_t_uint256_t_address_t_uint256__to_t_bytes32_t_uint256_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5298:9:6","type":""},{"name":"value3","nodeType":"YulTypedName","src":"5309:6:6","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5317:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5325:6:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5333:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5344:4:6","type":""}],"src":"5168:440:6"},{"body":{"nodeType":"YulBlock","src":"5760:100:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5777:3:6"},{"name":"value0","nodeType":"YulIdentifier","src":"5782:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5770:6:6"},"nodeType":"YulFunctionCall","src":"5770:19:6"},"nodeType":"YulExpressionStatement","src":"5770:19:6"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5809:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"5814:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5805:3:6"},"nodeType":"YulFunctionCall","src":"5805:12:6"},{"name":"value1","nodeType":"YulIdentifier","src":"5819:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5798:6:6"},"nodeType":"YulFunctionCall","src":"5798:28:6"},"nodeType":"YulExpressionStatement","src":"5798:28:6"},{"nodeType":"YulAssignment","src":"5835:19:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5846:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"5851:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5842:3:6"},"nodeType":"YulFunctionCall","src":"5842:12:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"5835:3:6"}]}]},"name":"abi_encode_tuple_packed_t_bytes32_t_uint256__to_t_bytes32_t_uint256__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"5728:3:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5733:6:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5741:6:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"5752:3:6","type":""}],"src":"5613:247:6"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_bytes32t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_stringliteral_6a0ed2f630d85172b8447d39b274fead846c000c347c8d7d67265e9ad836da36__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"Student already lucky\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_6c0755f7b177a75a575a6fc1ad54a95f3c29b31e64f77075462b5456f056869d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"Not enough LINK\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_e0ef19aa67a8b89b19419c8977a6a75d04286a47014bf7a3d2ea537634352c8b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"Only admin can call this functio\")\n        mstore(add(headStart, 96), \"n\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_aa31d97d949424087cac59e348924584a13a8784d3590fa798a0967391035445__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"Only VRFCoordinator can fulfill\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        let _1 := 32\n        mstore(add(headStart, _1), value1)\n        mstore(add(headStart, 64), 96)\n        let length := mload(value2)\n        mstore(add(headStart, 96), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 128), mload(add(add(value2, i), _1)))\n        }\n        mstore(add(add(headStart, length), 128), 0)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 128)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_bytes32_t_uint256__to_t_uint256_t_uint256_t_bytes32_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint256_t_address_t_uint256__to_t_bytes32_t_uint256_t_address_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), and(value2, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_packed_t_bytes32_t_uint256__to_t_bytes32_t_uint256__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, value0)\n        mstore(add(pos, 32), value1)\n        end := add(pos, 64)\n    }\n}","id":6,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"73":[{"length":32,"start":501},{"length":32,"start":1251}],"75":[{"length":32,"start":1124},{"length":32,"start":1298}]},"linkReferences":{},"object":"6080604052600436106100655760003560e01c806394985ddd1161004357806394985ddd146100e7578063cd4b691414610107578063ddca3f431461014657600080fd5b806365520a1e1461006a57806377cfad251461008c57806393708dda146100d4575b600080fd5b34801561007657600080fd5b5061008a6100853660046106e8565b61015c565b005b34801561009857600080fd5b506100bf6100a73660046106e8565b60009081526002602052604090206003015460ff1690565b60405190151581526020015b60405180910390f35b61008a6100e2366004610701565b61031a565b3480156100f357600080fd5b5061008a610102366004610701565b610459565b34801561011357600080fd5b506101386101223660046106e8565b6000908152600260208190526040909120015490565b6040519081526020016100cb565b34801561015257600080fd5b5061013860065481565b6000818152600260205260409020600381015460ff16156101c45760405162461bcd60e51b815260206004820152601560248201527f53747564656e7420616c7265616479206c75636b79000000000000000000000060448201526064015b60405180910390fd5b6006546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610244573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102689190610723565b10156102b65760405162461bcd60e51b815260206004820152600f60248201527f4e6f7420656e6f756768204c494e4b000000000000000000000000000000000060448201526064016101bb565b60006102c66005546006546104df565b60008181526003602090815260409182902086905581518381529081018690529192507f49cdaa45e000eb9a419ae3b028f7f7bec2179153ebe33293f31286642842132691015b60405180910390a1505050565b6007546001600160a01b0316331461039a5760405162461bcd60e51b815260206004820152602160248201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f60448201527f6e0000000000000000000000000000000000000000000000000000000000000060648201526084016101bb565b600060405180608001604052808481526020018381526020016000815260200160001515815250905080600260006103d160015490565b8152602080820192909252604090810160002083518155918301516001808401919091559083015160028301556060909201516003909101805460ff1916911515919091179055805481019055805160208083015160408051938452918301527f29358ba910ee1777e26b0ecfe36155daf0293714fc5dad62ec4287dda7f83c04910161030d565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104d15760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c0060448201526064016101bb565b6104db828261065a565b5050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634000aea07f00000000000000000000000000000000000000000000000000000000000000008486600060405160200161054f929190918252602082015260400190565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161057c9392919061073c565b6020604051808303816000875af115801561059b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bf91906107a2565b5060008381526020818152604080832054815180840188905280830185905230606082015260808082018390528351808303909101815260a0909101909252815191830191909120868452929091526106199060016107cb565b600085815260208181526040918290209290925580518083018790528082019390935280518084038201815260609093019052815191012090505b92915050565b600082815260036020818152604080842054808552600280845294829020938401805460ff1916600117905593830185905582548151868152928301869052908201869052606082015283907f6cb6de6180fcf811791a5aa7ffd54d665e5e1d8c139314673e11930890c519fb9060800160405180910390a150505060009182525060036020526040812055565b6000602082840312156106fa57600080fd5b5035919050565b6000806040838503121561071457600080fd5b50508035926020909101359150565b60006020828403121561073557600080fd5b5051919050565b6001600160a01b038416815260006020848184015260606040840152835180606085015260005b8181101561077f57858101830151858201608001528201610763565b506000608082860101526080601f19601f83011685010192505050949350505050565b6000602082840312156107b457600080fd5b815180151581146107c457600080fd5b9392505050565b80820180821115610654577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220463d4830095400e26da61cf255dfbff5e10ee86cac0ce5c5cabfca602ab70c4a64736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x65 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x94985DDD GT PUSH2 0x43 JUMPI DUP1 PUSH4 0x94985DDD EQ PUSH2 0xE7 JUMPI DUP1 PUSH4 0xCD4B6914 EQ PUSH2 0x107 JUMPI DUP1 PUSH4 0xDDCA3F43 EQ PUSH2 0x146 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x65520A1E EQ PUSH2 0x6A JUMPI DUP1 PUSH4 0x77CFAD25 EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0x93708DDA EQ PUSH2 0xD4 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x76 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8A PUSH2 0x85 CALLDATASIZE PUSH1 0x4 PUSH2 0x6E8 JUMP JUMPDEST PUSH2 0x15C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xBF PUSH2 0xA7 CALLDATASIZE PUSH1 0x4 PUSH2 0x6E8 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x8A PUSH2 0xE2 CALLDATASIZE PUSH1 0x4 PUSH2 0x701 JUMP JUMPDEST PUSH2 0x31A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8A PUSH2 0x102 CALLDATASIZE PUSH1 0x4 PUSH2 0x701 JUMP JUMPDEST PUSH2 0x459 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x113 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x138 PUSH2 0x122 CALLDATASIZE PUSH1 0x4 PUSH2 0x6E8 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xCB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x152 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x138 PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1C4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53747564656E7420616C7265616479206C75636B790000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x244 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x268 SWAP2 SWAP1 PUSH2 0x723 JUMP JUMPDEST LT ISZERO PUSH2 0x2B6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420656E6F756768204C494E4B0000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1BB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C6 PUSH1 0x5 SLOAD PUSH1 0x6 SLOAD PUSH2 0x4DF JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP7 SWAP1 SSTORE DUP2 MLOAD DUP4 DUP2 MSTORE SWAP1 DUP2 ADD DUP7 SWAP1 MSTORE SWAP2 SWAP3 POP PUSH32 0x49CDAA45E000EB9A419AE3B028F7F7BEC2179153EBE33293F312866428421326 SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x39A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C792061646D696E2063616E2063616C6C20746869732066756E6374696F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E00000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1BB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP SWAP1 POP DUP1 PUSH1 0x2 PUSH1 0x0 PUSH2 0x3D1 PUSH1 0x1 SLOAD SWAP1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 KECCAK256 DUP4 MLOAD DUP2 SSTORE SWAP2 DUP4 ADD MLOAD PUSH1 0x1 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 SSTORE SWAP1 DUP4 ADD MLOAD PUSH1 0x2 DUP4 ADD SSTORE PUSH1 0x60 SWAP1 SWAP3 ADD MLOAD PUSH1 0x3 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 SLOAD DUP2 ADD SWAP1 SSTORE DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE SWAP2 DUP4 ADD MSTORE PUSH32 0x29358BA910EE1777E26B0ECFE36155DAF0293714FC5DAD62EC4287DDA7F83C04 SWAP2 ADD PUSH2 0x30D JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x4D1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C7920565246436F6F7264696E61746F722063616E2066756C66696C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1BB JUMP JUMPDEST PUSH2 0x4DB DUP3 DUP3 PUSH2 0x65A JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x4000AEA0 PUSH32 0x0 DUP5 DUP7 PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x54F SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x57C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x73C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x59B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5BF SWAP2 SWAP1 PUSH2 0x7A2 JUMP JUMPDEST POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD DUP2 MLOAD DUP1 DUP5 ADD DUP9 SWAP1 MSTORE DUP1 DUP4 ADD DUP6 SWAP1 MSTORE ADDRESS PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP1 DUP3 ADD DUP4 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xA0 SWAP1 SWAP2 ADD SWAP1 SWAP3 MSTORE DUP2 MLOAD SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 KECCAK256 DUP7 DUP5 MSTORE SWAP3 SWAP1 SWAP2 MSTORE PUSH2 0x619 SWAP1 PUSH1 0x1 PUSH2 0x7CB JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE DUP1 MLOAD DUP1 DUP4 ADD DUP8 SWAP1 MSTORE DUP1 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP1 MLOAD DUP1 DUP5 SUB DUP3 ADD DUP2 MSTORE PUSH1 0x60 SWAP1 SWAP4 ADD SWAP1 MSTORE DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SLOAD DUP1 DUP6 MSTORE PUSH1 0x2 DUP1 DUP5 MSTORE SWAP5 DUP3 SWAP1 KECCAK256 SWAP4 DUP5 ADD DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE SWAP4 DUP4 ADD DUP6 SWAP1 SSTORE DUP3 SLOAD DUP2 MLOAD DUP7 DUP2 MSTORE SWAP3 DUP4 ADD DUP7 SWAP1 MSTORE SWAP1 DUP3 ADD DUP7 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD MSTORE DUP4 SWAP1 PUSH32 0x6CB6DE6180FCF811791A5AA7FFD54D665E5E1D8C139314673E11930890C519FB SWAP1 PUSH1 0x80 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP PUSH1 0x0 SWAP2 DUP3 MSTORE POP PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x714 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x735 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP5 DUP2 DUP5 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP5 ADD MSTORE DUP4 MLOAD DUP1 PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x77F JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x80 ADD MSTORE DUP3 ADD PUSH2 0x763 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x80 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x80 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x7C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x654 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CHAINID RETURNDATASIZE BASEFEE ADDRESS MULMOD SLOAD STOP 0xE2 PUSH14 0xA61CF255DFBFF5E10EE86CAC0CE5 0xC5 0xCA 0xBF 0xCA PUSH1 0x2A 0xB7 0xC 0x4A PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"234:3352:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1824:855;;;;;;;;;;-1:-1:-1;1824:855:5;;;;;:::i;:::-;;:::i;:::-;;3352:111;;;;;;;;;;-1:-1:-1;3352:111:5;;;;;:::i;:::-;3405:4;3428:20;;;:8;:20;;;;;:28;;;;;;3352:111;;;;364:14:6;;357:22;339:41;;327:2;312:18;3352:111:5;;;;;;;;1358:460;;;;;;:::i;:::-;;:::i;9576:207:0:-;;;;;;;;;;-1:-1:-1;9576:207:0;;;;;:::i;:::-;;:::i;3469:115:5:-;;;;;;;;;;-1:-1:-1;3469:115:5;;;;;:::i;:::-;3524:7;3550:20;;;:8;:20;;;;;;;;:27;;;3469:115;;;;1043:25:6;;;1031:2;1016:18;3469:115:5;897:177:6;752:18:5;;;;;;;;;;;;;;;;1824:855;1882:23;1908:20;;;:8;:20;;;;;1947:15;;;;;;1946:16;1938:50;;;;-1:-1:-1;;;1938:50:5;;1281:2:6;1938:50:5;;;1263:21:6;1320:2;1300:18;;;1293:30;1359:23;1339:18;;;1332:51;1400:18;;1938:50:5;;;;;;;;;2114:3;;2081:29;;;;;2104:4;2081:29;;;1575:74:6;2081:4:5;-1:-1:-1;;;;;2081:14:5;;;;1548:18:6;;2081:29:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:36;;2073:64;;;;-1:-1:-1;;;2073:64:5;;2051:2:6;2073:64:5;;;2033:21:6;2090:2;2070:18;;;2063:30;2129:17;2109:18;;;2102:45;2164:18;;2073:64:5;1849:339:6;2073:64:5;2147:17;2167:31;2185:7;;2194:3;;2167:17;:31::i;:::-;2566:36;;;;:25;:36;;;;;;;;;:49;;;2630:42;;2367:25:6;;;2408:18;;;2401:34;;;2566:36:5;;-1:-1:-1;2630:42:5;;2340:18:6;2630:42:5;;;;;;;;1872:807;;1824:855;:::o;1358:460::-;1044:5;;-1:-1:-1;;;;;1044:5:5;1030:10;:19;1022:65;;;;-1:-1:-1;;;1022:65:5;;2648:2:6;1022:65:5;;;2630:21:6;2687:2;2667:18;;;2660:30;2726:34;2706:18;;;2699:62;2797:3;2777:18;;;2770:31;2818:19;;1022:65:5;2446:397:6;1022:65:5;1482:22:::1;1507:159;;;;;;;;1540:10;1507:159;;;;1596:8;1507:159;;;;1626:1;1507:159;;;;1650:5;1507:159;;;;::::0;1482:184:::1;;1708:7;1676:8;:29;1685:19;:9;918:14:3::0;;827:112;1685:19:5::1;1676:29:::0;;::::1;::::0;;::::1;::::0;;;;;;;;-1:-1:-1;1676:29:5;:39;;;;;;::::1;::::0;::::1;::::0;;::::1;::::0;;;;;;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;;::::1;::::0;::::1;::::0;;::::1;::::0;;-1:-1:-1;;1676:39:5::1;::::0;::::1;;::::0;;;::::1;::::0;;1032:19:3;;;;;;1776:17:5;;1795:15:::1;::::0;;::::1;::::0;1761:50:::1;::::0;;2367:25:6;;;2408:18;;;2401:34;1761:50:5::1;::::0;2340:18:6;1761:50:5::1;2193:248:6::0;9576:207:0;9668:10;-1:-1:-1;;;;;9682:14:0;9668:28;;9660:72;;;;-1:-1:-1;;;9660:72:0;;3303:2:6;9660:72:0;;;3285:21:6;3342:2;3322:18;;;3315:30;3381:33;3361:18;;;3354:61;3432:18;;9660:72:0;3101:355:6;9660:72:0;9738:40;9756:9;9767:10;9738:17;:40::i;:::-;9576:207;;:::o;7732:1020::-;7809:17;7834:4;-1:-1:-1;;;;;7834:20:0;;7855:14;7871:4;7888:8;6589:1;7877:43;;;;;;;;2367:25:6;;;2423:2;2408:18;;2401:34;2355:2;2340:18;;2193:248;7877:43:0;;;;;;;;;;;;;7834:87;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;8152:15:0;8235:16;;;;;;;;;;;;978:51:1;;;;;5399:25:6;;;5440:18;;;5433:34;;;8228:4:0;5483:18:6;;;5476:83;5575:18;;;;5568:34;;;978:51:1;;;;;;;;;;5371:19:6;;;;978:51:1;;;968:62;;;;;;;;;8682:16:0;;;;;;;:20;;8701:1;8682:20;:::i;:::-;8663:6;:16;;;;;;;;;;;;:39;;;;1535:41:1;;;;;5770:19:6;;;5805:12;;;5798:28;;;;1535:41:1;;;;;;;;;5842:12:6;;;;1535:41:1;;1525:52;;;;;;-1:-1:-1;7732:1020:0;;;;;:::o;2685:661:5:-;2799:18;2820:36;;;:25;:36;;;;;;;;;2892:20;;;:8;:20;;;;;;;2961:15;;;:22;;-1:-1:-1;;2961:22:5;2979:4;2961:22;;;2993:14;;;:27;;;3080:17;;3036:62;;5003:25:6;;;5044:18;;;5037:34;;;5087:18;;;5080:34;;;5145:2;5130:18;;5123:34;2993:27:5;;3036:62;;4990:3:6;4975:19;3036:62:5;;;;;;;-1:-1:-1;;;3115:36:5;;;;-1:-1:-1;3115:25:5;:36;;;;;3108:43;2685:661::o;14:180:6:-;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;-1:-1:-1;165:23:6;;14:180;-1:-1:-1;14:180:6:o;391:248::-;459:6;467;520:2;508:9;499:7;495:23;491:32;488:52;;;536:1;533;526:12;488:52;-1:-1:-1;;559:23:6;;;629:2;614:18;;;601:32;;-1:-1:-1;391:248:6:o;1660:184::-;1730:6;1783:2;1771:9;1762:7;1758:23;1754:32;1751:52;;;1799:1;1796;1789:12;1751:52;-1:-1:-1;1822:16:6;;1660:184;-1:-1:-1;1660:184:6:o;3461:740::-;-1:-1:-1;;;;;3668:6:6;3664:55;3653:9;3646:74;3627:4;3739:2;3777:6;3772:2;3761:9;3757:18;3750:34;3820:2;3815;3804:9;3800:18;3793:30;3852:6;3846:13;3895:6;3890:2;3879:9;3875:18;3868:34;3920:1;3930:141;3944:6;3941:1;3938:13;3930:141;;;4040:14;;;4036:23;;4030:30;4005:17;;;4024:3;4001:27;3994:67;3959:10;;3930:141;;;3934:3;4121:1;4115:3;4106:6;4095:9;4091:22;4087:32;4080:43;4191:3;4184:2;4180:7;4175:2;4167:6;4163:15;4159:29;4148:9;4144:45;4140:55;4132:63;;;;3461:740;;;;;;:::o;4206:277::-;4273:6;4326:2;4314:9;4305:7;4301:23;4297:32;4294:52;;;4342:1;4339;4332:12;4294:52;4374:9;4368:16;4427:5;4420:13;4413:21;4406:5;4403:32;4393:60;;4449:1;4446;4439:12;4393:60;4472:5;4206:277;-1:-1:-1;;;4206:277:6:o;4488:279::-;4553:9;;;4574:10;;;4571:190;;;4617:77;4614:1;4607:88;4718:4;4715:1;4708:15;4746:4;4743:1;4736:15"},"gasEstimates":{"creation":{"codeDepositCost":"421400","executionCost":"infinite","totalCost":"infinite"},"external":{"chooseLucky(uint256)":"infinite","createStudent(uint256,uint256)":"103830","fee()":"2339","getRandom(uint256)":"2472","isLucky(uint256)":"2468","rawFulfillRandomness(bytes32,uint256)":"infinite"},"internal":{"fulfillRandomness(bytes32,uint256)":"infinite"}},"methodIdentifiers":{"chooseLucky(uint256)":"65520a1e","createStudent(uint256,uint256)":"93708dda","fee()":"ddca3f43","getRandom(uint256)":"cd4b6914","isLucky(uint256)":"77cfad25","rawFulfillRandomness(bytes32,uint256)":"94985ddd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"link\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyhash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LuckyStudent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RandomnessRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"StudentCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_studentId\",\"type\":\"uint256\"}],\"name\":\"chooseLucky\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_studentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"}],\"name\":\"createStudent\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_studentId\",\"type\":\"uint256\"}],\"name\":\"getRandom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_studentId\",\"type\":\"uint256\"}],\"name\":\"isLucky\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EduChainLinkOracle.sol\":\"EduChainLinkOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 private constant USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface internal immutable LINK;\\n  address private immutable vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 => uint256) /* keyHash */ /* nonce */\\n    private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(address _vrfCoordinator, address _link) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\",\"keccak256\":\"0xff9e7d773545a1a5d73106e72bfb429da79c1cc4d893fb62051df801d2e61469\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  ) internal pure returns (uint256) {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\\n\",\"keccak256\":\"0x2bf1168e8fe548fa990e0aeaf89ef90680f80aa31eeaf901f485df60de51d51b\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/EduChainLinkOracle.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\\\";\\n\\ncontract EduChainLinkOracle is VRFConsumerBase {\\n    using Counters for Counters.Counter;\\n    using SafeMath for uint256;\\n\\n    struct Student {\\n        uint256 studentId;\\n        uint256 groupId;\\n        uint256 random;\\n        bool isLucky;\\n    }\\n\\n    Counters.Counter private studentId;\\n    mapping(uint256 => Student) private students;\\n    mapping(bytes32 => uint256) private studentsRandomnessRequest;\\n    mapping(uint256 => uint256) playersCount;\\n    bytes32 private keyHash; // \\u043d\\u0443\\u0436\\u043d\\u043e \\u0427\\u0435\\u0439\\u043d\\u043b\\u0438\\u043d\\u043a\\u0443\\n    uint256 public fee; // \\u043d\\u0443\\u0436\\u043d\\u043e \\u0427\\u0435\\u0439\\u043d\\u043b\\u0438\\u043d\\u043a\\u0443\\n    address private admin;\\n\\n    event RandomnessRequested(bytes32, uint256);\\n    event LuckyStudent(uint256, uint256, bytes32, uint256);\\n    event StudentCreated(uint256, uint256);\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"Only admin can call this function\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address vrfCoordinator,\\n        address link,\\n        bytes32 _keyhash,\\n        uint256 _fee\\n    ) VRFConsumerBase(vrfCoordinator, link) {\\n        keyHash = _keyhash;\\n        fee = _fee;\\n        admin = msg.sender;\\n    }\\n\\n    function createStudent(uint256 _studentId, uint256 _groupId)\\n        public\\n        payable\\n        onlyAdmin\\n    {\\n        Student memory student = Student({\\n            studentId: _studentId, //studentId.current(),\\n            groupId: _groupId,\\n            random: 0,\\n            isLucky: false\\n        });\\n        students[studentId.current()] = student;\\n        studentId.increment();\\n        emit StudentCreated(student.studentId, student.groupId);\\n    }\\n\\n    function chooseLucky(uint256 _studentId) public {\\n        Student storage student = students[_studentId];\\n        require(!student.isLucky, \\\"Student already lucky\\\");\\n\\n        // \\u041f\\u0440\\u043e\\u0432\\u0435\\u0440\\u044f\\u0435\\u043c \\u0431\\u0430\\u043b\\u0430\\u043d\\u0441 \\u0434\\u043b\\u044f \\u043e\\u043f\\u043b\\u0430\\u0442\\u044b \\u0441\\u0431\\u043e\\u0440\\u0430\\n        require(LINK.balanceOf(address(this)) >= fee, \\\"Not enough LINK\\\");\\n        bytes32 requestId = requestRandomness(keyHash, fee);\\n\\n        // \\u043a\\u043e\\u0433\\u0434\\u0430 \\u0441\\u043b\\u0443\\u0447\\u0430\\u0439\\u043d\\u043e\\u0435 \\u0447\\u0438\\u0441\\u043b\\u043e \\u0432\\u0435\\u0440\\u043d\\u0435\\u0442\\u0441\\u044f \\u0432 \\u0444\\u0443\\u043d\\u043a\\u0446\\u0438\\u0438\\n        // fulfillRandomness, \\u043e\\u043d\\u043e \\u0431\\u0443\\u0434\\u0435\\u0442 \\u0438\\u043c\\u0435\\u0442\\u044c \\u0442\\u043e\\u043b\\u044c\\u043a\\u043e requestId\\n        // \\u0438 \\u0441\\u043b\\u0443\\u0447\\u0430\\u0439\\u043d\\u043e\\u0435 \\u0447\\u0438\\u0441\\u043b\\u043e, \\u043f\\u043e\\u044d\\u0442\\u043e\\u043c\\u0443 \\u0431\\u0435\\u0437 \\u0441\\u043e\\u043f\\u043e\\u0441\\u0442\\u0430\\u0432\\u043b\\u0435\\u043d\\u0438\\u044f \\u043c\\u044b \\u043d\\u0435 \\u0441\\u043c\\u043e\\u0436\\u0435\\u043c \\u043e\\u043f\\u0440\\u0435\\u0434\\u0435\\u043b\\u0438\\u0442\\u044c \\u043f\\u043e\\u0431\\u0435\\u0434\\u0438\\u0442\\u0435\\u043b\\u044f \\u043d\\u0443\\u0436\\u043d\\u043e\\u0439 \\u043b\\u043e\\u0442\\u0435\\u0440\\u0435\\u0438.\\n        studentsRandomnessRequest[requestId] = _studentId;\\n        emit RandomnessRequested(requestId, _studentId);\\n    }\\n\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness)\\n        internal\\n        override\\n    {\\n        uint256 _studentId = studentsRandomnessRequest[requestId];\\n        Student storage student = students[_studentId];\\n\\n        uint256 winner = randomness;\\n\\n        student.isLucky = true;\\n        student.random = randomness;\\n\\n        emit LuckyStudent(winner, randomness, requestId, student.studentId);\\n        delete studentsRandomnessRequest[requestId];\\n\\n        // if (winner > 8) {\\n        //     delete studentsRandomnessRequest[requestId];\\n\\n        //     emit LuckyStudent(winner, randomness, requestId, student.studentId);\\n        // }\\n    }\\n\\n    function isLucky(uint256 _studentId) public returns (bool) {\\n        return students[_studentId].isLucky;\\n    }\\n\\n    function getRandom(uint256 _studentId) public returns (uint256) {\\n        return students[_studentId].random;\\n    }\\n}\\n\",\"keccak256\":\"0x5e9c4ff3265e017f7cfb1d218271a9267984aaf70e0d29f83757208427d8c94f\",\"license\":\"Unlicense\"}},\"version\":1}","storageLayout":{"storage":[{"astId":79,"contract":"contracts/EduChainLinkOracle.sol:EduChainLinkOracle","label":"nonces","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_uint256)"},{"astId":677,"contract":"contracts/EduChainLinkOracle.sol:EduChainLinkOracle","label":"studentId","offset":0,"slot":"1","type":"t_struct(Counter)271_storage"},{"astId":682,"contract":"contracts/EduChainLinkOracle.sol:EduChainLinkOracle","label":"students","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_struct(Student)674_storage)"},{"astId":686,"contract":"contracts/EduChainLinkOracle.sol:EduChainLinkOracle","label":"studentsRandomnessRequest","offset":0,"slot":"3","type":"t_mapping(t_bytes32,t_uint256)"},{"astId":690,"contract":"contracts/EduChainLinkOracle.sol:EduChainLinkOracle","label":"playersCount","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_uint256)"},{"astId":692,"contract":"contracts/EduChainLinkOracle.sol:EduChainLinkOracle","label":"keyHash","offset":0,"slot":"5","type":"t_bytes32"},{"astId":694,"contract":"contracts/EduChainLinkOracle.sol:EduChainLinkOracle","label":"fee","offset":0,"slot":"6","type":"t_uint256"},{"astId":696,"contract":"contracts/EduChainLinkOracle.sol:EduChainLinkOracle","label":"admin","offset":0,"slot":"7","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_struct(Student)674_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct EduChainLinkOracle.Student)","numberOfBytes":"32","value":"t_struct(Student)674_storage"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_struct(Counter)271_storage":{"encoding":"inplace","label":"struct Counters.Counter","members":[{"astId":270,"contract":"contracts/EduChainLinkOracle.sol:EduChainLinkOracle","label":"_value","offset":0,"slot":"0","type":"t_uint256"}],"numberOfBytes":"32"},"t_struct(Student)674_storage":{"encoding":"inplace","label":"struct EduChainLinkOracle.Student","members":[{"astId":667,"contract":"contracts/EduChainLinkOracle.sol:EduChainLinkOracle","label":"studentId","offset":0,"slot":"0","type":"t_uint256"},{"astId":669,"contract":"contracts/EduChainLinkOracle.sol:EduChainLinkOracle","label":"groupId","offset":0,"slot":"1","type":"t_uint256"},{"astId":671,"contract":"contracts/EduChainLinkOracle.sol:EduChainLinkOracle","label":"random","offset":0,"slot":"2","type":"t_uint256"},{"astId":673,"contract":"contracts/EduChainLinkOracle.sol:EduChainLinkOracle","label":"isLucky","offset":0,"slot":"3","type":"t_bool"}],"numberOfBytes":"128"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}